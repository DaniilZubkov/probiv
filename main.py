import phonenumbers
from aiogram import types
from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor
from aiogram import Bot
from keyboards import main_keyboard, back_command_keboard, payment_keyboard, payment_keyboard1, network2, network1, network3
import re
from phonenumbers import geocoder, carrier, timezone
import asyncio
import requests
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Command
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import StatesGroup, State
import datetime
import time
from db import Database
import json

from dadata import DadataAsync, Dadata


bot = Bot('7783210062:AAFC_H7lRdIPdcSrdbII_ETa0PY1pcTM25M')
token = 'e06e442308d4e5f6af20defac93ff1cf2683cd40'
secret = '195254f0af3eb4a629fb543a460bf49418ccdedc'
db = Database('database.db')
cost = 1000000
WALLET = 'YOUR CRYPTO WALLET HERE'

dp = Dispatcher(bot, storage=MemoryStorage())
dadata = DadataAsync(token, secret)
dadata_for_inn = Dadata(token)
GROUP_CHAT_ID = -1002192140565
BOT_NICKNAME = 'ultra_parcer_robot'



USER_AGENTS = [
    'geoapiExercises1',
    'geoapiUserAgent2',
    'geoapiUserAgent3',
    'geoapiClient4',
    'geoapiDemoAgent5'
]


company_keyboard2 = ''


class Renting(StatesGroup):
    rent_time = State()






# –ü–µ—Ä–µ–≤–æ–¥ –ø–æ–¥–ø–∏—Å–∫–∏ –≤ –¥–Ω–∏
def days_to_seconds(days):
    return days * 24 * 60 * 60


def time_sub_day(get_time):
    time_now = int(time.time())
    middle_time = int(get_time) - time_now
    if middle_time <= 0:
        return False
    else:
        dt = str(datetime.timedelta(seconds=middle_time))
        dt = dt.replace("days", '–¥–Ω–µ–π')
        return dt


@dp.message_handler(commands=['start'])
async def start_command(message: types.Message):
    greeting_photo_path = 'fotos/lightning.jpg'
    await message.answer_photo(photo=open(greeting_photo_path, "rb"), caption='–û—Ç–∫—Ä–æ–π—Ç–µ –º–∏—Ä –≤–æ–∑–æ–∂–Ω–æ—Å—Ç–µ–π —Å –Ω–∞–º–∏ - –º—ã –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ, —á—Ç–æ –µ—Å—Ç—å –≤ —Å–µ—Ç–∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç –ø—Ä–µ–≤—Ä–∞—â–∞—è –æ—Ç–∫—Ä—ã—Ç—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –≤ –∑–Ω–∞–Ω–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏\n\n'
                         '<b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:</b>', parse_mode='html', reply_markup=main_keyboard)



    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Å—Ç–∞—Ä—Ç–µ –∏ –≤—ã–¥–∞—á–∞ –ø—Ä–æ–±–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞

    if (not db.user_exists(message.from_user.id)):
        db.add_user(message.from_user.id)
        db.set_nickname(message.from_user.id, message.from_user.username)
        db.set_signup(message.from_user.id, 'done')
        user_id = message.from_user.id
        if db.get_sub_status(user_id):
            success_photo_path = 'fotos/success.jpg'
            time_sub = int(time.time() + days_to_seconds(1)) - int(time.time())
            db.set_time_sub(user_id, time_sub)
            await message.answer_photo(photo=open(success_photo_path, "rb"), caption=f'‚úÖ <b>–í–∞–º –±—ã–ª –≤—ã–¥–∞–Ω –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–µ–æ–¥ –Ω–∞ 1 –¥–µ–Ω—å</b>\n\n'
                                                                                     f'üéâ <i>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º</i>', parse_mode='html')
        else:
            success_photo_path = 'fotos/success.jpg'
            time_sub = int(time.time() + days_to_seconds(1))
            db.set_time_sub(user_id, time_sub)
            await message.answer_photo(photo=open(success_photo_path, "rb"),
                                       caption=f'‚úÖ <b>–í–∞–º –±—ã–ª –≤—ã–¥–∞–Ω –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–µ–æ–¥ –Ω–∞ 1 –¥–µ–Ω—å</b>\n\n'
                                               f'üéâ <i>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º</i>', parse_mode='html')
        start_command = message.text
        referrer_id = str(start_command[7:])
        if str(referrer_id) != "":
            if str(referrer_id) != str(message.from_user.id):
                db.add_user(message.from_user.id, referrer_id)
                db.set_nickname(message.from_user.id, message.from_user.username)
                db.set_signup(message.from_user.id, 'done')
                user_id = message.from_user.id
                if db.get_sub_status(user_id):
                    time_sub = int(time.time() + days_to_seconds(1)) - int(time.time())
                    db.set_time_sub(user_id, time_sub)
                    await message.answer_photo(photo=open(success_photo_path, "rb"),
                                               caption=f'‚úÖ <b>–í–∞–º –±—ã–ª –≤—ã–¥–∞–Ω –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–µ–æ–¥ –Ω–∞ 1 –¥–µ–Ω—å</b>\n\n'
                                                       f'üéâ <i>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º</i>', parse_mode='html')
                else:
                    time_sub = int(time.time() + days_to_seconds(1))
                    db.set_time_sub(user_id, time_sub)
                    await message.answer_photo(photo=open(success_photo_path, "rb"),
                                               caption=f'‚úÖ <b>–í–∞–º –±—ã–ª –≤—ã–¥–∞–Ω –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–µ–æ–¥ –Ω–∞ 1 –¥–µ–Ω—å</b>\n\n'
                                                       f'üéâ <i>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º</i>', parse_mode='html')
                try:
                    await bot.send_photo(referrer_id, photo=open(success_photo_path, "rb"),
                                           caption="‚úÖ <b>–ü–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.</b>\n\n <i>üéâ –í—ã –ø–æ–ª—É—á–∏–ª–∏ –¥–æ—Å—Ç—É–ø –Ω–∞ 10 –¥–µ–Ω–µ–π! –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º</i>", parse_mode='html')
                    if db.get_sub_status(referrer_id):
                        time_sub = int(time.time() + days_to_seconds(10)) - int(time.time())
                        db.set_time_sub(referrer_id, time_sub)
                    else:
                        time_sub = int(time.time() + days_to_seconds(10))
                        db.set_time_sub(referrer_id, time_sub)
                except:
                    pass
            else:
                pass
        else:
            pass
    else:
        if db.get_sub_status(message.from_user.id):
            success_photo_path = 'fotos/success.jpg'
            await message.answer_photo(photo=open(success_photo_path, "rb"),
                                       caption=f'‚úÖ <b>–ï—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É</b>', parse_mode='html')
        else:
            error_photo_path = 'fotos/error.jpg'
            await message.answer_photo(photo=open(error_photo_path, "rb"),
                caption=f'üö® <b>–î–æ—Å—Ç—É–ø –∑–∞–∫–æ–Ω—á–∏–ª—Å—è! {message.from_user.first_name}, –Ω–∞–º –Ω—É–∂–Ω–æ —ç—Ç–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å!</b>\n\n', reply_markup=payment_keyboard1)





@dp.callback_query_handler(lambda query: True)
async def callback_handler(callback_query: types.CallbackQuery, state: FSMContext):
    global current_time_sub
    global cost
    global WALLET
    # REQUEST COMMANDS

    if callback_query.data == 'requests_commands':
        questions_photo_path = 'fotos/questions.jpg'
        await bot.delete_message(callback_query.from_user.id, callback_query.message.message_id)
        await callback_query.message.answer_photo(photo=open(questions_photo_path, "rb"), caption='‚¨áÔ∏è ***–ü—Ä–∏–º–µ—Ä—ã –∫–æ–º–∞–Ω–¥ –¥–ª—è –≤–≤–æ–¥–∞:***\n\n'
                                            'üì± `79999999999` - –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n'
                                            'üì® `elonmusk@spacex.com` - –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ Email\n'
                                            'üèò `–º–æ—Å–∫–≤–∞, —Å—É—Ö–æ–Ω—Å–∫–∞—è, 11, 89` - –Ω–∞–π—Ç–∏ ***–∫–∞–¥–∞—Å—Ç—Ä–æ–≤—ã–π –Ω–æ–º–µ—Ä*** –≤ —Ç–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ!!!\n\n'
                                            'üèõ `/company –°–±–µ—Ä–±–∞–Ω–∫` - –ø–æ–∏—Å–∫ –ø–æ –∫–æ–º–ø–∞–Ω–∏–∏\n'
                                            'üìë `/inn 123456789123` - –ø–æ–∏—Å–∫ –ø–æ –ò–ù–ù\n',
                                            parse_mode='MARKDOWN', reply_markup=back_command_keboard)

    # BACK TO MENU
    if callback_query.data == 'back_to_menu':
        await bot.delete_message(callback_query.from_user.id, callback_query.message.message_id)
        await callback_query.message.answer(
                '–û—Ç–∫—Ä–æ–π—Ç–µ –º–∏—Ä –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π —Å –Ω–∞–º–∏ - –º—ã –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ, —á—Ç–æ –µ—Å—Ç—å –≤ —Å–µ—Ç–∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç –ø—Ä–µ–≤—Ä–∞—â–∞—è –æ—Ç–∫—Ä—ã—Ç—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –≤ –∑–Ω–∞–Ω–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏\n\n'
                '<b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:</b>', parse_mode='html', reply_markup=main_keyboard)

    # COMPANY SEARCH
    if callback_query.data.startswith('company_'):
        company_name = callback_query.data.replace('company_', '', 1)
        try:
            result = await dadata.suggest("party", company_name)
            write_inf(result, 'users.json')
            useresult = read_inf('users.json')
            for user in useresult:
                kpp = user['data']['kpp']
                inn = user['data']['inn']
                ogrn = user['data']['ogrn']
                address = user['data']['address']['value']
                country_name = user['data']['address']['data']['country']
                main = user['data']['management']['name']
                post_roll = user['data']['management']['post']
                post_roll_date = datetime.datetime.fromtimestamp(user['data']['management']['start_date'] / 1000)
                post_roll_date_ref = post_roll_date.strftime('%Y-%m-%d %H:%M:%S')
                type_of_company = user['data']['type']
                data_ogrn = datetime.datetime.fromtimestamp(user['data']['ogrn_date'] / 1000)
                data_ogrn_ref = data_ogrn.strftime('%Y-%m-%d %H:%M:%S')
                await callback_query.message.answer(f'üõ†Ô∏è ***–ö–æ–º–ø–∞–Ω–∏—è:*** {company_name}\n'
                                                    f'‚îú ***–ê–¥—Ä–µ—Å –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è:*** `{address}`\n'
                                                    f'‚îú ***–ö–ü–ü –∫–æ–º–ø–∞–Ω–∏–∏:*** `{kpp}`\n'
                                                    f'‚îú ***–ò–ù–ù –∫–æ–º–ø–∞–Ω–∏–∏:*** `{inn}`\n'
                                                    f'‚îú ***–û–ì–†–ù –∫–æ–º–ø–∞–Ω–∏–∏:*** `{ogrn}`\n'
                                                    f'‚îî ***–¢–∏–ø –∫–æ–º–ø–∞–Ω–∏–∏:*** `{type_of_company}`\n\n'
                                                    f'üë∑üèª‚Äç‚ôÇÔ∏è ***–£–ø—Ä–∞–≤–ª–µ–Ω–µ—Ü:*** {main}\n'
                                                    f'üèÜ ***–î–æ–ª–∂–Ω–æ—Å—Ç—å:*** {post_roll}\n'
                                                    f'üëë ***–î–∞—Ç–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —É–ø—Ä–∞–≤–ª–µ–Ω—Ü–∞:*** {post_roll_date_ref}\n'
                                                    f'üìÑ ***–î–∞—Ç–∞ –æ–≥—Ä–Ω:*** {data_ogrn_ref}\n'
                                                    f'üåé ***–°—Ç—Ä–∞–Ω–∞:*** {country_name}', parse_mode='MARKDOWN')
        except Exception:
            pass

    # VIEW PROFILE
    if callback_query.data == 'my_acc':
        user_nickname = f'üë§ –í–∞—à –Ω–∏–∫–Ω–µ–π–º: <b>{db.get_nickname(callback_query.from_user.id)}</b>'
        user_sub = time_sub_day(db.get_time_sub(callback_query.from_user.id))
        if user_sub == False:
            user_sub = '‚ùå –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç <b>—É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞</b>'
        user_sub = f'\nüîã –ü–æ–¥–ø–∏—Å–∫–∞: <b>{user_sub}</b>'
        await bot.send_message(callback_query.from_user.id, user_nickname + user_sub, parse_mode='html', reply_markup=payment_keyboard1)


    # REFERAL SISTEM
        # –ü–û–ü–û–õ–ù–ï–ù–ò–ï –ö–û–®–ï–õ–¨–ö–ê
    if callback_query.data == 'pay_the_call':
        bank_photo_path = 'fotos/bank.jpg'
        await callback_query.message.answer_photo(photo=open(bank_photo_path, "rb"),
                                                      caption=f'ü§ñ –ù–∞—à —Ç–∞—Ä–∏—Ñ:\n1 –º–µ—Å—è—Ü = 5 USDT\n6 –º–µ—Å—è—Ü–µ–≤ = 25 USDT\n1 –≥–æ–¥ = 55 USDT\n\n<b>‚ùó –ß—Ç–æ–±—ã –ø–æ–ø–æ–ª–Ω–∏—Ç—å –¥–æ—Å—Ç—É–ø –Ω—É–∂–Ω–æ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –∫–æ—à–µ–ª–µ–∫. –í—ã –º–æ–∂–µ—Ç–µ –≤–≤–æ–¥–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥—ã –æ—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞.</b>\n\nüíµ –ö–æ—à–µ–ª–µ–∫: <b>{db.get_user_wallet(callback_query.from_user.id)} USDT</b>\n\n<i>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ:</i>',
                                                      reply_markup=payment_keyboard, parse_mode='html')

    if callback_query.data == 'month':
            success_photo_path = 'fotos/success.jpg'
            fail_photo_path = 'fotos/error.jpg'
            if float(db.get_user_wallet(callback_query.from_user.id)) >= 5:
                db.set_user_wallet_take(callback_query.from_user.id, 5)
                if db.get_sub_status(callback_query.from_user.id):
                    time_sub = int(time.time() + days_to_seconds(30)) - int(time.time())
                    db.set_time_sub(callback_query.from_user.id, time_sub)
                    await bot.send_photo(photo=open(success_photo_path, "rb"), chat_id=callback_query.from_user.id,
                                         caption='‚úÖ <b>–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–µ–æ–±—Ä–µ–ª–∏ –¥–æ—Å—Ç—É–ø –Ω–∞ 1 –º–µ—Å—è—Ü</b>\n\n'
                                                 '<i>üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!</i>', parse_mode='html')
                else:
                    time_sub = int(time.time() + days_to_seconds(30))
                    db.set_time_sub(callback_query.from_user.id, time_sub)
                    await bot.send_photo(photo=open(success_photo_path, "rb"), chat_id=callback_query.from_user.id,
                                         caption='‚úÖ <b>–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–µ–æ–±—Ä–µ–ª–∏ –¥–æ—Å—Ç—É–ø –Ω–∞ 1 –º–µ—Å—è—Ü</b>\n\n'
                                                 '<i>üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!</i>', parse_mode='html')
            else:
                await callback_query.message.answer_photo(photo=open(fail_photo_path, "rb"),
                                                          caption=f'‚ùå <b>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –∫–æ—à–µ–ª—å–∫–µ!</b>\n\n'
                                                                  f'<i>üëá –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –∫–æ—à–µ–ª–µ–∫ –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ —á—Ç–æ–±—ã –æ–ø–ª–∞—Ç–∏—Ç—å –¥–æ—Å—Ç—É–ø!</i>',
                                                          parse_mode='html',
                                                          reply_markup=back_command_keboard)

    if callback_query.data == 'halfyear':
            success_photo_path = 'fotos/success.jpg'
            fail_photo_path = 'fotos/error.jpg'
            if float(db.get_user_wallet(callback_query.from_user.id)) >= 25:
                db.set_user_wallet_take(callback_query.from_user.id, 25)
                if db.get_sub_status(callback_query.from_user.id):
                    time_sub = int(time.time() + days_to_seconds(180)) - int(time.time())
                    db.set_time_sub(callback_query.from_user.id, time_sub)
                    await bot.send_photo(photo=open(success_photo_path, "rb"), chat_id=callback_query.from_user.id,
                                         caption='‚úÖ <b>–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–µ–æ–±—Ä–µ–ª–∏ –¥–æ—Å—Ç—É–ø –Ω–∞ 6 –º–µ—Å—è—Ü–µ–≤</b>\n\n'
                                                 '<i>üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!</i>', parse_mode='html')
                else:
                    time_sub = int(time.time() + days_to_seconds(180))
                    db.set_time_sub(callback_query.from_user.id, time_sub)
                    await bot.send_photo(photo=open(success_photo_path, "rb"), chat_id=callback_query.from_user.id,
                                         caption='‚úÖ <b>–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–µ–æ–±—Ä–µ–ª–∏ –¥–æ—Å—Ç—É–ø –Ω–∞ 6 –º–µ—Å—è—Ü–µ–≤</b>\n\n'
                                                 '<i>üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!</i>', parse_mode='html')
            else:
                await callback_query.message.answer_photo(photo=open(fail_photo_path, "rb"),
                                                          caption=f'‚ùå <b>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –∫–æ—à–µ–ª—å–∫–µ!</b>\n\n'
                                                                  f'<i>üëá –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –∫–æ—à–µ–ª–µ–∫ –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ —á—Ç–æ–±—ã –æ–ø–ª–∞—Ç–∏—Ç—å –¥–æ—Å—Ç—É–ø!</i>',
                                                          parse_mode='html', reply_markup=payment_keyboard1)

    if callback_query.data == 'year':
            success_photo_path = 'fotos/success.jpg'
            fail_photo_path = 'fotos/error.jpg'
            if float(db.get_user_wallet(callback_query.from_user.id)) >= 55:
                db.set_user_wallet_take(callback_query.from_user.id, 55)
                if db.get_sub_status(callback_query.from_user.id):
                    time_sub = int(time.time() + days_to_seconds(365)) - int(time.time())
                    db.set_time_sub(callback_query.from_user.id, time_sub)
                    await bot.send_photo(photo=open(success_photo_path, "rb"), chat_id=callback_query.from_user.id,
                                         caption='‚úÖ <b>–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–µ–æ–±—Ä–µ–ª–∏ –¥–æ—Å—Ç—É–ø –Ω–∞ 1 –≥–æ–¥</b>\n\n'
                                                 '<i>üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!</i>', parse_mode='html')
                else:
                    time_sub = int(time.time() + days_to_seconds(365))
                    db.set_time_sub(callback_query.from_user.id, time_sub)
                    await bot.send_photo(photo=open(success_photo_path, "rb"), chat_id=callback_query.from_user.id,
                                         caption='‚úÖ <b>–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–µ–æ–±—Ä–µ–ª–∏ –¥–æ—Å—Ç—É–ø –Ω–∞ 1 –≥–æ–¥</b>\n\n'
                                                 '<i>üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!</i>', parse_mode='html')
            else:
                await callback_query.message.answer_photo(photo=open(fail_photo_path, "rb"),
                                                          caption=f'‚ùå <b>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –∫–æ—à–µ–ª—å–∫–µ!</b>\n\n'
                                                                  f'<i>üëá –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –∫–æ—à–µ–ª–µ–∫ –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ —á—Ç–æ–±—ã –æ–ø–ª–∞—Ç–∏—Ç—å –¥–æ—Å—Ç—É–ø!</i>',
                                                          parse_mode='html', reply_markup=payment_keyboard1)

    if callback_query.data == 'bye_loot':
            card_photo_path = 'fotos/bank_cards.jpg'
            await callback_query.message.answer_photo(photo=open(card_photo_path, "rb"),
                                                      caption='ü§ñ <b>–í—ã–±–µ—Ä–∏ —Å–µ—Ç—å –¥–ª—è –æ–ø–ª–∞—Ç—ã USDT:</b>',
                                                      parse_mode='html',
                                                      reply_markup=network1)

    if callback_query.data == 'TON':
            await bot.delete_message(callback_query.from_user.id, callback_query.message.message_id)
            card_photo_path = 'fotos/bank_cards.jpg'
            NETWORK = 'TON'
            WALLET = 'UQCZWX_JeVoi9ajcpXKAp1F8soOH2YIv6HitZeGUE16gGVfk'
            db.set_wallet(callback_query.from_user.id, 'UQCZWX_JeVoi9ajcpXKAp1F8soOH2YIv6HitZeGUE16gGVfk')
            db.set_network(callback_query.from_user.id, 'TON')
            await state.set_state(Renting.rent_time)
            await callback_query.message.answer_photo(photo=open(card_photo_path, "rb"),
                                                      caption='ü§ñ <b>–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –Ω–∞ –∫–æ—à–µ–ª–µ–∫ (–≤ USDT, –±–µ–∑ —Ç–æ—á–µ–∫ –∏ –∑–∞–ø—è—Ç—ã—Ö):</b>',
                                                      parse_mode='html', reply_markup=back_command_keboard)

    if callback_query.data == 'TRC':
            await bot.delete_message(callback_query.from_user.id, callback_query.message.message_id)
            card_photo_path = 'fotos/bank_cards.jpg'
            NETWORK = 'TRC'
            WALLET = 'TWBv2DH5cpHP8UgRj9wdCcr2rWkJTgGJoo'
            db.set_wallet(callback_query.from_user.id, 'TWBv2DH5cpHP8UgRj9wdCcr2rWkJTgGJoo')
            db.set_network(callback_query.from_user.id, 'TRC')
            await state.set_state(Renting.rent_time)
            await callback_query.message.answer_photo(photo=open(card_photo_path, "rb"),
                                                      caption='ü§ñ <b>–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –Ω–∞ –∫–æ—à–µ–ª–µ–∫ (–≤ USDT, –±–µ–∑ —Ç–æ—á–µ–∫ –∏ –∑–∞–ø—è—Ç—ã—Ö):</b>',
                                                      parse_mode='html', reply_markup=back_command_keboard)

    if callback_query.data == 'ERC':
            await bot.delete_message(callback_query.from_user.id, callback_query.message.message_id)
            card_photo_path = 'fotos/bank_cards.jpg'
            NETWORK = 'ERC'
            WALLET = '0x4B908f33111e968970bD4c5b1f6CE4014ad4F92E'
            db.set_wallet(callback_query.from_user.id, '0x4B908f33111e968970bD4c5b1f6CE4014ad4F92E')
            db.set_network(callback_query.from_user.id, 'ERC')
            await state.set_state(Renting.rent_time)
            await callback_query.message.answer_photo(photo=open(card_photo_path, "rb"),
                                                      caption='ü§ñ <b>–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –Ω–∞ –∫–æ—à–µ–ª–µ–∫ (–≤ USDT, –±–µ–∑ —Ç–æ—á–µ–∫ –∏ –∑–∞–ø—è—Ç—ã—Ö):</b>',
                                                      parse_mode='html', reply_markup=back_command_keboard)



    # –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–ª–∞—Ç—ã –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    try:
            action, user_id = callback_query.data.split(':')
            user_id = int(user_id)
            rent = float(db.get_rent(user_id))
            message_photo_path = 'fotos/message.jpg'
            if action == 'success':
                db.set_user_wallet_make(user_id, rent)
                await bot.send_photo(photo=open(message_photo_path, "rb"), chat_id=user_id,
                                     caption=f'‚úÖ <b>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞ –∫–æ—à–µ–ª–µ–∫ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ!</b>\n\n'
                                             f'üíµ –ö–æ—à–µ–ª–µ–∫: <b>{db.get_user_wallet(user_id)} USDT</b>', parse_mode='html',
                                     reply_markup=back_command_keboard)

            if action == 'invalid':
                error_photo_path = 'fotos/error.jpg'
                await bot.answer_callback_query(callback_query.id)
                await bot.send_photo(photo=open(error_photo_path, "rb"), chat_id=user_id,
                                     caption='‚ùå <b>–ü–æ—Ö–æ–∂–µ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –í–æ–∑–º–æ–∂–Ω–æ –≤–æ–∑–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –¥–∞–Ω–Ω—ã—Ö.</b>\n\n'
                                             '<i>–ï—Å–ª–∏ –≤—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –≤–µ—Ä–Ω—ã –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: @pump_supporting_bot</i>',
                                     parse_mode='html', reply_markup=back_command_keboard)
    except Exception:
        pass

    # if callback_query.data == callback_query.data:
    #     company_name = callback_query.data
    #     try:
    #         result = await dadata.suggest("party", company_name)
    #         write_inf(result, 'users.json')
    #         useresult = read_inf('users.json')
    #         for user in useresult:
    #             kpp = user['data']['kpp']
    #             inn = user['data']['inn']
    #             ogrn = user['data']['ogrn']
    #             address = user['data']['address']['value']
    #             country_name = user['data']['address']['data']['country']
    #             main = user['data']['management']['name']
    #             post_roll = user['data']['management']['post']
    #             post_roll_date = datetime.datetime.fromtimestamp(user['data']['management']['start_date'] / 1000)
    #             post_roll_date_ref = post_roll_date.strftime('%Y-%m-%d %H:%M:%S')
    #             type_of_company = user['data']['type']
    #             data_ogrn = datetime.datetime.fromtimestamp(user['data']['ogrn_date'] / 1000)
    #             data_ogrn_ref = data_ogrn.strftime('%Y-%m-%d %H:%M:%S')
    #             await callback_query.message.answer(f'üõ†Ô∏è ***–ö–æ–º–ø–∞–Ω–∏—è:*** {company_name}\n'
    #                                                 f'‚îú ***–ê–¥—Ä–µ—Å –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è:*** `{address}`\n'
    #                                                 f'‚îú ***–ö–ü–ü –∫–æ–º–ø–∞–Ω–∏–∏:*** `{kpp}`\n'
    #                                                 f'‚îú ***–ò–ù–ù –∫–æ–º–ø–∞–Ω–∏–∏:*** `{inn}`\n'
    #                                                 f'‚îú ***–û–ì–†–ù –∫–æ–º–ø–∞–Ω–∏–∏:*** `{ogrn}`\n'
    #                                                 f'‚îî ***–¢–∏–ø –∫–æ–º–ø–∞–Ω–∏–∏:*** `{type_of_company}`\n\n'
    #                                                 f'üë∑üèª‚Äç‚ôÇÔ∏è ***–£–ø—Ä–∞–≤–ª–µ–Ω–µ—Ü:*** {main}\n'
    #                                                 f'üèÜ ***–î–æ–ª–∂–Ω–æ—Å—Ç—å:*** {post_roll}\n'
    #                                                 f'üëë ***–î–∞—Ç–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —É–ø—Ä–∞–≤–ª–µ–Ω—Ü–∞:*** {post_roll_date_ref}\n'
    #                                                 f'üìÑ ***–î–∞—Ç–∞ –æ–≥—Ä–Ω:*** {data_ogrn_ref}\n'
    #                                                 f'üåé ***–°—Ç—Ä–∞–Ω–∞:*** {country_name}', parse_mode='MARKDOWN')
    #     except Exception:
    #         pass




# –ë–õ–û–ö –û–ü–õ–ê–¢–´
def calculate_sum_from_rubs_to_dollars(num):
    return round(num / 90.00, 2)


@dp.message_handler(state=Renting.rent_time)
async def loot_for_wallet(message: types.Message, state: FSMContext):
    global cost, user_count, sum
    bank_photo_path = 'fotos/bank.jpg'
    if message.text.isdigit():
        sum = float(message.text)
        await state.update_data(rent_time=float(message.text))
        user_count = sum
        await state.finish()
        db.set_rent(message.from_user.id, float(message.text))
        await message.answer_photo(photo=open(bank_photo_path, "rb"), caption=f'ü§ñ ***–ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –Ω–∏–∂–µ –Ω–∞ –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞:***\n\n'
                             f'`{db.get_wallet(message.from_user.id)}`\n\n'
                             f'‚ùó ***–ü–æ—Ç–æ–º –ø—Ä–∏—à–ª–∏—Ç–µ –ø—Ä–∏—à–ª–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã. –í –æ–ø–∏—Å–∞–Ω–∏–∏ –ø–æ–¥ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–º –Ω—É–∂–Ω–æ –≤—Å—Ç–∞–≤–∏—Ç—å —Ö—ç—à —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏, –∏–Ω–∞—á–µ –±–æ—Ç –Ω–µ –∑–∞—Å—á–∏—Ç–∞–µ—Ç –æ–ø–ª–∞—Ç—É. (—Å–µ—Ç—å {db.get_network(message.from_user.id)})***\n\n'
                             f'üíµ –ö –æ–ø–ª–∞—Ç–µ: ***{db.get_rent(message.from_user.id)} USDT***', parse_mode='MARKDOWN', reply_markup=back_command_keboard)







# PHONE NUMBER
@dp.message_handler(regexp=r'^(\+?\d{1,3})?[-\s\.]?\(?(\d{1,3})\)?[-\s\.]?(\d{3,4})[-\s\.]?(\d{4})$')
async def phone_number_handler(message: types.Message):
    # –ü–û–õ–£–ß–ï–ù–ò–ï –ò–ù–§–û–†–ú–ê–¶–ò–ò –ü–û –ù–û–ú–ï–†–£ –¢–ï–õ–ï–§–û–ù–£ –ß–ï–†–ï–ó DADATA API
    answer = message.text
    result = await dadata.clean("phone", answer)
    cont = InlineKeyboardMarkup(row_width=2)
    wh = InlineKeyboardButton("üü¢ WhatsApp", url=f"""wa.me/{result["phone"]}""")
    tg = InlineKeyboardButton("üîµ Telegram", url=f"https://t.me/{result['phone']}")
    creator = InlineKeyboardButton("üöÄ –¢–≥ —Å–æ–∑–¥–∞—Ç–µ–ª—è", url=f"https://t.me/+1A9f6ZFMJBgxMjRi")
    cont.add(wh, tg, creator)
    parsed_number = phonenumbers.parse(answer, None)
    if phonenumbers.is_valid_number(parsed_number) is True:
        await message.answer(f'üì± (–¢–µ–ª–µ—Ñ–æ–Ω: {result["number"]})\n'
                             f'‚îú ***–ù–æ–º–µ—Ä:*** `{answer}`\n'
                             f'‚îú ***–°—Ç—Ä–∞–Ω–∞:*** `{result["country"]}`\n'
                             f'‚îú ***–†–µ–≥–∏–æ–Ω \ –ì–æ—Ä–æ–¥:*** `{result["region"]}, {result["city"]}`\n'
                             f'‚îú ***–û–ø–µ—Ä–∞—Ç–æ—Ä:*** `{carrier.name_for_number(parsed_number, "ru")}\n'
                             f'‚îî ***–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å:*** `{result["timezone"]}`\n\n'
                             , parse_mode='MARKDOWN', reply_markup=cont)

    else:
        await message.answer('‚ùóÔ∏è –ù–æ–º–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω')

# EMAIL
@dp.message_handler(regexp=r'^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$')
async def email_handler(message: types.Message):
    # –ü–û–õ–£–ß–ï–ù–ò–ï –ò–ù–§–û–†–ú–ê–¶–ò–ò –ü–û EMAIL –ß–ï–†–ï–ó DADATA API
    # –ü–†–û–í–ï–ö–ê –î–û–°–¢–£–ü–ê
    if db.get_sub_status(message.from_user.id):
        answer = message.text
        result = await dadata.clean("email", answer)
        if result["qc"] == 0:
            await message.answer(f'üì® ***Email:*** `{result["email"]}`\n'
                                 f'‚îú ***–î–æ–º–µ–Ω:*** `{result["domain"]}`\n'
                                 f'‚îú ***–õ–æ–∫–∞–ª—å–Ω–∞—è —á–∞—Å—Ç—å –∞–¥—Ä–µ—Å–∞:*** `{result["local"]}`\n'
                                 f'‚îî ***–ö–ª–∞—Å—Å Email:*** `{result["type"]}`', parse_mode='MARKDOWN')
        else:
            await message.answer('‚ùóÔ∏è Email –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –æ–Ω –Ω–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω')
    else:
        await message.answer(
            f'üö® –î–æ—Å—Ç—É–ø –∑–∞–∫–æ–Ω—á–∏–ª—Å—è! {message.from_user.first_name}, –Ω–∞–º –Ω—É–∂–Ω–æ —ç—Ç–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å!\n\n',
            reply_markup=payment_keyboard1)




# (–ö–ê–î–ê–°–¢–†–û–í–´–ô –ù–û–ú–ï–†)
@dp.message_handler(lambda message: ',' in message.text)
async def kadaster_number_handler(message: types.Message):
    # –ü–û–õ–£–ß–ï–ù–ò–ï –ò–ù–§–û–†–ú–ê–¶–ò–ò –ü–û –£–õ–ò–¶–ï –ß–ï–†–ï–ó DADATA API
    # –ü–†–û–í–ï–ö–ê –î–û–°–¢–£–ü–ê
    if db.get_sub_status(message.from_user.id):
        answer = message.text
        parts = [part.strip() for part in answer.split(',')]
        parts = ' '.join(parts)
        result = await dadata.clean("address", answer)
        await message.answer(f'‚îú ***–ê–¥—Ä–µ—Å:*** `{result["result"]}`\n'
                             f'‚îú ***–£–ª–∏—Ü–∞:*** `{result["street"]}`\n'
                             f'‚îú ***–î–æ–º:*** `{result["house"]}`\n'
                             f'‚îú ***–ö–≤–∞—Ä—Ç–∏—Ä–∞:*** `{result["flat"]}`\n'
                             f'‚îú ***–ò–Ω–¥–µ–∫—Å:*** `{result["postal_code"]}`\n'
                             f'‚îú ***–û–±–ª–∞—Å—Ç—å:*** `{result["region"]}`\n'
                             f'‚îî ***–ö–∞–¥–∞—Å—Ç—Ä–æ–≤—ã–π –Ω–æ–º–µ—Ä:*** `{result["flat_cadnum"]}`', parse_mode='MARKDOWN')
    else:
        await message.answer(
            f'üö® –î–æ—Å—Ç—É–ø –∑–∞–∫–æ–Ω—á–∏–ª—Å—è! {message.from_user.first_name}, –Ω–∞–º –Ω—É–∂–Ω–æ —ç—Ç–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å!\n\n',
            reply_markup=payment_keyboard1)


# COMPANY
@dp.message_handler(commands=['company'])
async def company_handler(message: types.Message):
    global company_keyboard2
    # –ü–û–õ–£–ß–ï–ù–ò–ï –ò–ù–§–û–†–ú–ê–¶–ò–ò –ü–û –ö–û–ú–ü–ê–ù–ò–ò –ß–ï–†–ï–ó DADATA API
    # –ü–†–û–í–ï–†–ö–ê –î–û–°–¢–£–ü–ê
    if db.get_sub_status(message.from_user.id):
        try:
            comand_parse = message.text.split(maxsplit=1)
            company_keyboard = InlineKeyboardMarkup(row_width=1)
            answer = comand_parse[1]
            result = await dadata.suggest("party", answer)
            write_inf(result, 'users.json')
            useresult = read_inf('users.json')
            result = [user['value'] for user in useresult]
            for i in result:
                button = InlineKeyboardButton(text=i, callback_data=f'company_{i}')
                company_keyboard.add(button)
            back = InlineKeyboardButton(text='üîô –ù–∞–∑–∞–¥', callback_data='back_to_menu')
            company_keyboard.add(back)
            company_keyboard2 = company_keyboard
            await message.answer('üÜî –ù–∞–π–¥–µ–Ω—ã –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏. –í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –∫–æ–º–ø–∞–Ω–∏–π:', reply_markup=company_keyboard)
            print(result)
        except Exception:
            pass
    else:
        await message.answer(
            f'üö® –î–æ—Å—Ç—É–ø –∑–∞–∫–æ–Ω—á–∏–ª—Å—è! {message.from_user.first_name}, –Ω–∞–º –Ω—É–∂–Ω–æ —ç—Ç–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å!\n\n',
            reply_markup=payment_keyboard1)


# INN SEARCH
@dp.message_handler(commands=['inn'])
async def inn_handler(message: types.Message):
    # –ü–û–õ–£–ß–ï–ù–ò–ï –ò–ù–§–û–†–ú–ê–¶–ò–ò –ß–ï–†–ï–ó –ò–ù–ù –ö–û–ú–ü–ê–ù–ò–ò
    if db.get_sub_status(message.from_user.id):
        try:
            inn_parse = message.text.split(maxsplit=1)
            answer = inn_parse[1]
            company_keyboard = InlineKeyboardMarkup(row_width=1)
            result = dadata_for_inn.find_by_id("party", answer)
            write_inf(result, 'users.json')
            useresult = read_inf('users.json')
            result = [user['value'] for user in useresult]
            for i in result:
                button = InlineKeyboardButton(text=i, callback_data=i)
                company_keyboard.add(button)
            back = InlineKeyboardButton(text='üîô –ù–∞–∑–∞–¥', callback_data='back_to_menu')
            company_keyboard.add(back)
            await message.answer('üÜî –ù–∞–π–¥–µ–Ω—ã –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏. –í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –∫–æ–º–ø–∞–Ω–∏–π:', reply_markup=company_keyboard)
        except Exception:
            pass
    else:
        await message.answer(
            f'üö® –î–æ—Å—Ç—É–ø –∑–∞–∫–æ–Ω—á–∏–ª—Å—è! {message.from_user.first_name}, –Ω–∞–º –Ω—É–∂–Ω–æ —ç—Ç–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å!\n\n',
            reply_markup=payment_keyboard1)








# PAYMENT_PART; TON; TRX; eth;
@dp.message_handler(regexp='^0x[a-fA-F0-9]{64}$', content_types=['photo'])
async def handle_transaction_eth(message: types.Message):
    global succes_or_invalid, user_count
    success_photo_path = 'fotos/success.jpg'
    user_id = message.from_user.id
    succes_or_invalid = InlineKeyboardMarkup(inline_keyboard=[(
        InlineKeyboardButton(text='‚úÖ –£—Å–ø–µ—à–Ω–æ', callback_data=f'success:{user_id}'),
        InlineKeyboardButton(text='‚ùå –ù–µ —É—Å–ø–µ—à–Ω–æ', callback_data=f'invalid:{user_id}')
    )])
    pay_k = succes_or_invalid
    await message.forward(chat_id=GROUP_CHAT_ID)
    await message.answer_photo(photo=open(success_photo_path, "rb"), caption='‚úÖ <b>–û—Ç–ª–∏—á–Ω–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—É–¥–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–∞ –æ—Ç 15 –º–∏–Ω—É—Ç –¥–æ 24 —á–∞—Å–æ–≤</b>\n\n'
                         '<i>–ï—Å–ª–∏ –±—É–¥—É—Ç –≤–æ–ø—Ä–æ—Å—ã –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: @your_bot</i>', parse_mode='html', reply_markup=back_command_keboard)
    await bot.send_message(GROUP_CHAT_ID, f'ETH {db.get_rent(message.from_user.id)} USDT', reply_markup=pay_k)


@dp.message_handler(regexp='[a-fA-F0-9]{64}$', content_types=['photo'])
async def handle_transaction_tron(message: types.Message):
    global succes_or_invalid, user_count
    success_photo_path = 'fotos/success.jpg'
    user_id = message.from_user.id
    succes_or_invalid = InlineKeyboardMarkup(inline_keyboard=[(
        InlineKeyboardButton(text='‚úÖ–£—Å–ø–µ—à–Ω–æ', callback_data=f'success:{user_id}'),
        InlineKeyboardButton(text='‚ùå–ù–µ —É—Å–ø–µ—à–Ω–æ', callback_data=f'invalid:{user_id}')
    )])
    pay_k = succes_or_invalid
    await message.forward(chat_id=GROUP_CHAT_ID)
    await message.answer_photo(photo=open(success_photo_path, "rb"),
                               caption='‚úÖ <b>–û—Ç–ª–∏—á–Ω–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—É–¥–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–∞ –æ—Ç 15 –º–∏–Ω—É—Ç –¥–æ 24 —á–∞—Å–æ–≤</b>\n\n'
                                       '<i>–ï—Å–ª–∏ –±—É–¥—É—Ç –≤–æ–ø—Ä–æ—Å—ã –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: @your_bot</i>', parse_mode='html', reply_markup=back_command_keboard)
    await bot.send_message(GROUP_CHAT_ID, f'TRX {db.get_rent(message.from_user.id)} USDT', reply_markup=pay_k)


@dp.message_handler(regexp='[a-fA-F0-9]{66}$', content_types=['photo'])
async def handle_transaction_ton(message: types.Message):
    global succes_or_invalid, user_count
    success_photo_path = 'fotos/success.jpg'
    user_id = message.from_user.id
    succes_or_invalid = InlineKeyboardMarkup(inline_keyboard=[(
        InlineKeyboardButton(text='‚úÖ–£—Å–ø–µ—à–Ω–æ', callback_data=f'success:{user_id}'),
        InlineKeyboardButton(text='‚ùå–ù–µ —É—Å–ø–µ—à–Ω–æ', callback_data=f'invalid:{user_id}')
    )])
    pay_k = succes_or_invalid
    await message.forward(chat_id=GROUP_CHAT_ID)
    await message.answer_photo(photo=open(success_photo_path, "rb"),
                               caption='‚úÖ <b>–û—Ç–ª–∏—á–Ω–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—É–¥–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–∞ –æ—Ç 15 –º–∏–Ω—É—Ç –¥–æ 24 —á–∞—Å–æ–≤</b>\n\n'
                                       '<i>–ï—Å–ª–∏ –±—É–¥—É—Ç –≤–æ–ø—Ä–æ—Å—ã –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: @your_bot</i>', parse_mode='html', reply_markup=back_command_keboard)
    await bot.send_message(GROUP_CHAT_ID, f'TON {db.get_rent(message.from_user.id)}', reply_markup=pay_k)







# TECHNICAL PART
def write_inf(data, file_name):
    data = json.dumps(data)
    data = json.loads(str(data))

    with open(file_name, 'w', encoding="utf-8") as file:
        json.dump(data, file, indent=4)

def read_inf(file_name):
    with open(file_name, 'r', encoding="utf-8") as file:
        return json.load(file)

def get_data():
    users = read_inf('users.json')
    for user in users['suggestions']:
        print(user.get('value'))
        with open("users.json", "w") as f:
            pass



if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)