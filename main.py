import phonenumbers
from aiogram import types
from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor
from aiogram import Bot
from keyboards import main_keyboard, back_command_keboard, payment_keyboard, payment_keyboard1, network2, network1, network3
import re
from phonenumbers import geocoder, carrier, timezone
import asyncio
import requests
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
import db
import datetime
import time
from db import Database
import json

from dadata import DadataAsync, Dadata


bot = Bot('YOUR BOT TOKEN')
token = 'API DADATA KEY'
secret = 'DADATA`S SECRET KEY'
db = Database('database.db')
cost = 1000000
WALLET = 'YOUR CRYPTO WALLET HERE'

dp = Dispatcher(bot)
dadata = DadataAsync(token, secret)
dadata_for_inn = Dadata(token)
GROUP_CHAT_ID = 'ID –î–õ–Ø –°–û–ó–î–ê–ù–ù–û–ì–û –í–ê–ú–ò –ß–ê–¢–ê –í –¢–ï–õ–ï–ì–†–ê–ú–ï –ß–¢–û–ë–´ –ü–†–ò–ù–ò–ú–ê–¢–¨ –û–ü–ê–õ–¢–£'
BOT_NICKNAME = 'gb_bog_by_burn_bot'



USER_AGENTS = [
    'geoapiExercises1',
    'geoapiUserAgent2',
    'geoapiUserAgent3',
    'geoapiClient4',
    'geoapiDemoAgent5'
]

company_keyboard2 = ''

# –ü–µ—Ä–µ–≤–æ–¥ –ø–æ–¥–ø–∏—Å–∫–∏ –≤ –¥–Ω–∏
def days_to_seconds(days):
    return days * 24 * 60 * 60


def time_sub_day(get_time):
    time_now = int(time.time())
    middle_time = int(get_time) - time_now
    if middle_time <= 0:
        return False
    else:
        dt = str(datetime.timedelta(seconds=middle_time))
        dt = dt.replace("days", '–¥–Ω–µ–π')
        return dt


@dp.message_handler(commands=['start'])
async def start_command(message: types.Message):
    await message.answer('–û—Ç–∫—Ä–æ–π—Ç–µ –º–∏—Ä –≤–æ–∑–æ–∂–Ω–æ—Å—Ç–µ–π —Å –Ω–∞–º–∏ - –º—ã –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ, —á—Ç–æ –µ—Å—Ç—å –≤ —Å–µ—Ç–∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç –ø—Ä–µ–≤—Ä–∞—â–∞—è –æ—Ç–∫—Ä—ã—Ç—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –≤ –∑–Ω–∞–Ω–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏\n\n'
                         '<b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:</b>', parse_mode='html', reply_markup=main_keyboard)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Å—Ç–∞—Ä—Ç–µ –∏ –≤—ã–¥–∞—á–∞ –ø—Ä–æ–±–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞

    if (not db.user_exists(message.from_user.id)):
        db.add_user(message.from_user.id)
        db.set_nickname(message.from_user.id, message.from_user.username)
        db.set_signup(message.from_user.id, 'done')
        user_id = message.from_user.id
        if db.get_sub_status(user_id):
            time_sub = int(time.time() + days_to_seconds(1)) - int(time.time())
            db.set_time_sub(user_id, time_sub)
            await message.answer(f'‚úÖ –í–∞–º –±—ã–ª –≤—ã–¥–∞–Ω <b>–ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–µ–æ–¥ –Ω–∞ 1 –¥–µ–Ω—å</b>', parse_mode='html')
        else:
            time_sub = int(time.time() + days_to_seconds(1))
            db.set_time_sub(user_id, time_sub)
            await message.answer(f'‚úÖ –í–∞–º –±—ã–ª –≤—ã–¥–∞–Ω <b>–ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –Ω–∞ 1 –¥–µ–Ω—å</b>', parse_mode='html')
        start_command = message.text
        referrer_id = str(start_command[7:])
        if str(referrer_id) != "":
            if str(referrer_id) != str(message.from_user.id):
                db.add_user(message.from_user.id, referrer_id)
                db.set_nickname(message.from_user.id, message.from_user.username)
                db.set_signup(message.from_user.id, 'done')
                user_id = message.from_user.id
                if db.get_sub_status(user_id):
                    time_sub = int(time.time() + days_to_seconds(1)) - int(time.time())
                    db.set_time_sub(user_id, time_sub)
                    await message.answer(f'‚úÖ –í–∞–º –±—ã–ª –≤—ã–¥–∞–Ω <b>–ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –Ω–∞ 1 –¥–µ–Ω—å</b>', parse_mode='html')
                else:
                    time_sub = int(time.time() + days_to_seconds(1))
                    db.set_time_sub(user_id, time_sub)
                    await message.answer(f'‚úÖ –í–∞–º –±—ã–ª –≤—ã–¥–∞–Ω <b>–ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –Ω–∞ 1 –¥–µ–Ω—å</b>', parse_mode='html')
                try:
                    await bot.send_message(referrer_id,
                                           "‚úÖ –ü–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.\n\n –í—ã –ø–æ–ª—É—á–∏–ª–∏ –¥–æ—Å—Ç—É–ø –Ω–∞ 10 –¥–µ–Ω–µ–π!")
                    if db.get_sub_status(referrer_id):
                        time_sub = int(time.time() + days_to_seconds(10)) - int(time.time())
                        db.set_time_sub(referrer_id, time_sub)
                    else:
                        time_sub = int(time.time() + days_to_seconds(10))
                        db.set_time_sub(referrer_id, time_sub)
                except:
                    pass
            else:
                pass
        else:
            pass
    else:
        if db.get_sub_status(message.from_user.id):
            await message.answer('‚úÖ –ï—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É')
        else:
            await message.answer(
                f'üö® –î–æ—Å—Ç—É–ø –∑–∞–∫–æ–Ω—á–∏–ª—Å—è! {message.from_user.first_name}, –Ω–∞–º –Ω—É–∂–Ω–æ —ç—Ç–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å!\n\n', reply_markup=payment_keyboard1)

@dp.callback_query_handler(lambda query: True)
async def callback_handler(callback_query: types.CallbackQuery):
    global current_time_sub
    global cost
    global WALLET
    # REQUEST COMMANDS
    if callback_query.data == 'requests_commands':
        await bot.delete_message(callback_query.from_user.id, callback_query.message.message_id)
        await callback_query.message.answer('‚¨áÔ∏è ***–ü—Ä–∏–º–µ—Ä—ã –∫–æ–º–∞–Ω–¥ –¥–ª—è –≤–≤–æ–¥–∞:***\n\n'
                                            'üì± `79999999999` - –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n'
                                            'üì® `elonmusk@spacex.com` - –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ Email\n'
                                            'üèò `–º–æ—Å–∫–≤–∞, —Å—É—Ö–æ–Ω—Å–∫–∞—è, 11, 89` - –Ω–∞–π—Ç–∏ ***–∫–∞–¥–∞—Å—Ç—Ä–æ–≤—ã–π –Ω–æ–º–µ—Ä*** –≤ —Ç–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ!!!\n\n'
                                            'üèõ `/company –°–±–µ—Ä–±–∞–Ω–∫` - –ø–æ–∏—Å–∫ –ø–æ –∫–æ–º–ø–∞–Ω–∏–∏\n'
                                            'üìë `/inn 123456789123` - –ø–æ–∏—Å–∫ –ø–æ –ò–ù–ù\n',
                                            parse_mode='MARKDOWN', reply_markup=back_command_keboard)

    # BACK TO MENU
    if callback_query.data == 'back_to_menu':
        await bot.delete_message(callback_query.from_user.id, callback_query.message.message_id)
        await callback_query.message.answer(
                '–û—Ç–∫—Ä–æ–π—Ç–µ –º–∏—Ä –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π —Å –Ω–∞–º–∏ - –º—ã –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ, —á—Ç–æ –µ—Å—Ç—å –≤ —Å–µ—Ç–∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç –ø—Ä–µ–≤—Ä–∞—â–∞—è –æ—Ç–∫—Ä—ã—Ç—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –≤ –∑–Ω–∞–Ω–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏\n\n'
                '<b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:</b>', parse_mode='html', reply_markup=main_keyboard)

    # COMPANY SEARCH
    if callback_query.data == callback_query.data:
        company_name = callback_query.data
        try:
            result = await dadata.suggest("party", company_name)
            write_inf(result, 'users.json')
            useresult = read_inf('users.json')
            for user in useresult:
                kpp = user['data']['kpp']
                inn = user['data']['inn']
                ogrn = user['data']['ogrn']
                address = user['data']['address']['value']
                country_name = user['data']['address']['data']['country']
                main = user['data']['management']['name']
                post_roll = user['data']['management']['post']
                post_roll_date = datetime.datetime.fromtimestamp(user['data']['management']['start_date'] / 1000)
                post_roll_date_ref = post_roll_date.strftime('%Y-%m-%d %H:%M:%S')
                type_of_company = user['data']['type']
                data_ogrn = datetime.datetime.fromtimestamp(user['data']['ogrn_date'] / 1000)
                data_ogrn_ref = data_ogrn.strftime('%Y-%m-%d %H:%M:%S')
                await callback_query.message.answer(f'üõ†Ô∏è ***–ö–æ–º–ø–∞–Ω–∏—è:*** {company_name}\n'
                                                    f'‚îú ***–ê–¥—Ä–µ—Å –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è:*** `{address}`\n'
                                                    f'‚îú ***–ö–ü–ü –∫–æ–º–ø–∞–Ω–∏–∏:*** `{kpp}`\n'
                                                    f'‚îú ***–ò–ù–ù –∫–æ–º–ø–∞–Ω–∏–∏:*** `{inn}`\n'
                                                    f'‚îú ***–û–ì–†–ù –∫–æ–º–ø–∞–Ω–∏–∏:*** `{ogrn}`\n'
                                                    f'‚îî ***–¢–∏–ø –∫–æ–º–ø–∞–Ω–∏–∏:*** `{type_of_company}`\n\n'
                                                    f'üë∑üèª‚Äç‚ôÇÔ∏è ***–£–ø—Ä–∞–≤–ª–µ–Ω–µ—Ü:*** {main}\n'
                                                    f'üèÜ ***–î–æ–ª–∂–Ω–æ—Å—Ç—å:*** {post_roll}\n'
                                                    f'üëë ***–î–∞—Ç–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —É–ø—Ä–∞–≤–ª–µ–Ω—Ü–∞:*** {post_roll_date_ref}\n'
                                                    f'üìÑ ***–î–∞—Ç–∞ –æ–≥—Ä–Ω:*** {data_ogrn_ref}\n'
                                                    f'üåé ***–°—Ç—Ä–∞–Ω–∞:*** {country_name}', parse_mode='MARKDOWN')
        except Exception:
            pass

    # VIEW PROFILE
    if callback_query.data == 'my_acc':
        user_nickname = f'üë§–í–∞—à –Ω–∏–∫–Ω–µ–π–º: <b>{db.get_nickname(callback_query.from_user.id)}</b>'
        user_sub = time_sub_day(db.get_time_sub(callback_query.from_user.id))
        if user_sub == False:
            user_sub = '‚ùå–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç <b>—É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞</b>'
        user_sub = f'\nüîã–ü–æ–¥–ø–∏—Å–∫–∞: <b>{user_sub}</b>'
        await bot.send_message(callback_query.from_user.id, user_nickname + user_sub, parse_mode='html', reply_markup=payment_keyboard1)


    # REFERAL SISTEM
    if callback_query.data == 'partners_refs':
        await callback_query.message.answer(
            f'ü§ñ <b>–ó–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ –≤ –±–æ—Ç–∞ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ 10 –¥–µ–Ω–µ–π –¥–æ—Å—Ç—É–ø–∞!</b>\n\nüöÄ –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: https://t.me/{BOT_NICKNAME}?start={callback_query.from_user.id}\n\n',
            parse_mode='html')

    # PAYMENT
    if callback_query.data == 'pay_the_call':
        await callback_query.message.answer(
            'ü§ñ–ù–∞—à —Ç–∞—Ä–∏—Ñ:\n1 –º–µ—Å—è—Ü = 10 USDT\n6 –º–µ—Å—è—Ü–µ–≤ = 45 USDT\n1 –≥–æ–¥ = 100 USDT\n\n<b>‚ùó –í—ã –º–æ–∂–µ—Ç–µ –≤–≤–æ–¥–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥—ã –æ—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞. (–£–õ–°–û–í–ù–û –î–ò–ß–¨)</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ:',
            reply_markup=payment_keyboard, parse_mode='html')
    try:
        if callback_query.data == 'month':
            await bot.delete_message(callback_query.from_user.id, callback_query.message.message_id)
            await callback_query.message.answer('–í—ã–±–µ—Ä–∏ —Å–µ—Ç—å –¥–ª—è –æ–ø–ª–∞—Ç—ã USDT:', reply_markup=network1)
        if callback_query.data == 'TRC1':
            WALLET = 'TWBv2DH5cpHP8UgRj9wdCcr2rWkJTgGJoo'
            cost = 1000000
            await bot.delete_message(callback_query.from_user.id, callback_query.message.message_id)
            await callback_query.message.answer('***–ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ —Å—Ç—Ä–æ–≥–æ 10 USDT –Ω–∞ –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞:***\n\n'
                                                f'`{WALLET}`\n\n‚ùó***–ü–æ—Ç–æ–º –ø—Ä–∏—à–ª–∏—Ç–µ –ø—Ä–∏—à–ª–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã. –í –æ–ø–∏—Å–∞–Ω–∏–∏ –ø–æ–¥ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–º –Ω—É–∂–Ω–æ –≤—Å—Ç–∞–≤–∏—Ç—å —Ö—ç—à —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏, –∏–Ω–∞—á–µ –±–æ—Ç –Ω–µ –∑–∞—Å—á–∏—Ç–∞–µ—Ç –æ–ø–ª–∞—Ç—É. (—Å–µ—Ç—å TRC20)***',
                                                parse_mode='MARKDOWN')

        if callback_query.data == 'TON1':
            WALLET = 'UQCZWX_JeVoi9ajcpXKAp1F8soOH2YIv6HitZeGUE16gGVfk'
            cost = 1000000
            await bot.delete_message(callback_query.from_user.id, callback_query.message.message_id)
            await callback_query.message.answer('***–ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ —Å—Ç—Ä–æ–≥–æ 10 USDT*** –Ω–∞ –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞:\n\n'
                                                f'`{WALLET}`\n\n‚ùó***–ü–æ—Ç–æ–º –ø—Ä–∏—à–ª–∏—Ç–µ –ø—Ä–∏—à–ª–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã. –í –æ–ø–∏—Å–∞–Ω–∏–∏ –ø–æ–¥ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–º –Ω—É–∂–Ω–æ –≤—Å—Ç–∞–≤–∏—Ç—å —Ö—ç—à —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏, –∏–Ω–∞—á–µ –±–æ—Ç –Ω–µ –∑–∞—Å—á–∏—Ç–∞–µ—Ç –æ–ø–ª–∞—Ç—É. (—Å–µ—Ç—å TON)***',
                                                parse_mode='MARKDOWN')
        if callback_query.data == 'ARB1':
            WALLET = '0x4B908f33111e968970bD4c5b1f6CE4014ad4F92E'
            cost = 1000000
            await bot.delete_message(callback_query.from_user.id, callback_query.message.message_id)
            await callback_query.message.answer('***–ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ —Å—Ç—Ä–æ–≥–æ 10 USDT*** –Ω–∞ –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞:\n\n'
                                                f'`{WALLET}`\n\n‚ùó***–ü–æ—Ç–æ–º –ø—Ä–∏—à–ª–∏—Ç–µ –ø—Ä–∏—à–ª–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã. –í –æ–ø–∏—Å–∞–Ω–∏–∏ –ø–æ–¥ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–º –Ω—É–∂–Ω–æ –≤—Å—Ç–∞–≤–∏—Ç—å —Ö—ç—à —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏, –∏–Ω–∞—á–µ –±–æ—Ç –Ω–µ –∑–∞—Å—á–∏—Ç–∞–µ—Ç –æ–ø–ª–∞—Ç—É. (—Å–µ—Ç—å ARB)***',
                                                parse_mode='MARKDOWN')
        if callback_query.data == 'ERC1':
            WALLET = '0x4B908f33111e968970bD4c5b1f6CE4014ad4F92E'
            cost = 1000000
            await bot.delete_message(callback_query.from_user.id, callback_query.message.message_id)
            await callback_query.message.answer('***–ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ —Å—Ç—Ä–æ–≥–æ 10 USDT*** –Ω–∞ –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞:\n\n'
                                                f'`{WALLET}`\n\n‚ùó***–ü–æ—Ç–æ–º –ø—Ä–∏—à–ª–∏—Ç–µ –ø—Ä–∏—à–ª–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã. –í –æ–ø–∏—Å–∞–Ω–∏–∏ –ø–æ–¥ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–º –Ω—É–∂–Ω–æ –≤—Å—Ç–∞–≤–∏—Ç—å —Ö—ç—à —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏, –∏–Ω–∞—á–µ –±–æ—Ç –Ω–µ –∑–∞—Å—á–∏—Ç–∞–µ—Ç –æ–ø–ª–∞—Ç—É. (—Å–µ—Ç—å ERC20)***',
                                                parse_mode='MARKDOWN')

        # NETWORK 2
        if callback_query.data == 'halfyear':
            await bot.delete_message(callback_query.from_user.id, callback_query.message.message_id)
            await callback_query.message.answer('–í—ã–±–µ—Ä–∏ —Å–µ—Ç—å –¥–ª—è –æ–ø–ª–∞—Ç—ã USDT:', reply_markup=network2)
        if callback_query.data == 'TRC2':
            WALLET = 'TWBv2DH5cpHP8UgRj9wdCcr2rWkJTgGJoo'
            cost = 4500000
            await bot.delete_message(callback_query.from_user.id, callback_query.message.message_id)
            await callback_query.message.answer('***–ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ —Å—Ç—Ä–æ–≥–æ 45 USDT*** –Ω–∞ –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞:\n\n'
                                                f'`{WALLET}`\n\n‚ùó***–ü–æ—Ç–æ–º –ø—Ä–∏—à–ª–∏—Ç–µ –ø—Ä–∏—à–ª–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã. –í –æ–ø–∏—Å–∞–Ω–∏–∏ –ø–æ–¥ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–º –Ω—É–∂–Ω–æ –≤—Å—Ç–∞–≤–∏—Ç—å —Ö—ç—à —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏, –∏–Ω–∞—á–µ –±–æ—Ç –Ω–µ –∑–∞—Å—á–∏—Ç–∞–µ—Ç –æ–ø–ª–∞—Ç—É. (—Å–µ—Ç—å TRC20)***',
                                                parse_mode='MARKDOWN')
        if callback_query.data == 'TON2':
            WALLET = 'UQCZWX_JeVoi9ajcpXKAp1F8soOH2YIv6HitZeGUE16gGVfk'
            cost = 4500000
            await bot.delete_message(callback_query.from_user.id, callback_query.message.message_id)
            await callback_query.message.answer('***–ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ —Å—Ç—Ä–æ–≥–æ 45 USDT*** –Ω–∞ –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞:\n\n'
                                                f'`{WALLET}`\n\n‚ùó***–ü–æ—Ç–æ–º –ø—Ä–∏—à–ª–∏—Ç–µ –ø—Ä–∏—à–ª–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã. –í –æ–ø–∏—Å–∞–Ω–∏–∏ –ø–æ–¥ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–º –Ω—É–∂–Ω–æ –≤—Å—Ç–∞–≤–∏—Ç—å —Ö—ç—à —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏, –∏–Ω–∞—á–µ –±–æ—Ç –Ω–µ –∑–∞—Å—á–∏—Ç–∞–µ—Ç –æ–ø–ª–∞—Ç—É. (—Å–µ—Ç—å TON)***',
                                                parse_mode='MARKDOWN')
        if callback_query.data == 'ARB2':
            WALLET = '0x4B908f33111e968970bD4c5b1f6CE4014ad4F92E'
            cost = 4500000
            await bot.delete_message(callback_query.from_user.id, callback_query.message.message_id)
            await callback_query.message.answer('***–ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ —Å—Ç—Ä–æ–≥–æ 45 USDT*** –Ω–∞ –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞:\n\n'
                                                f'`{WALLET}`\n\n‚ùó***–ü–æ—Ç–æ–º –ø—Ä–∏—à–ª–∏—Ç–µ –ø—Ä–∏—à–ª–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã. –í –æ–ø–∏—Å–∞–Ω–∏–∏ –ø–æ–¥ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–º –Ω—É–∂–Ω–æ –≤—Å—Ç–∞–≤–∏—Ç—å —Ö—ç—à —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏, –∏–Ω–∞—á–µ –±–æ—Ç –Ω–µ –∑–∞—Å—á–∏—Ç–∞–µ—Ç –æ–ø–ª–∞—Ç—É. (—Å–µ—Ç—å ARB)***',
                                                parse_mode='MARKDOWN')
        if callback_query.data == 'ERC2':
            WALLET = '0x4B908f33111e968970bD4c5b1f6CE4014ad4F92E'
            cost = 4500000
            await bot.delete_message(callback_query.from_user.id, callback_query.message.message_id)
            await callback_query.message.answer('***–ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ —Å—Ç—Ä–æ–≥–æ 45 USDT*** –Ω–∞ –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞:\n\n'
                                                f'`{WALLET}`\n\n‚ùó***–ü–æ—Ç–æ–º –ø—Ä–∏—à–ª–∏—Ç–µ –ø—Ä–∏—à–ª–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã. –í –æ–ø–∏—Å–∞–Ω–∏–∏ –ø–æ–¥ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–º –Ω—É–∂–Ω–æ –≤—Å—Ç–∞–≤–∏—Ç—å —Ö—ç—à —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏, –∏–Ω–∞—á–µ –±–æ—Ç –Ω–µ –∑–∞—Å—á–∏—Ç–∞–µ—Ç –æ–ø–ª–∞—Ç—É. (—Å–µ—Ç—å ERC20)***',
                                                parse_mode='MARKDOWN')

        # NETWORK 3
        if callback_query.data == 'year':
            await bot.delete_message(callback_query.from_user.id, callback_query.message.message_id)
            await callback_query.message.answer('–í—ã–±–µ—Ä–∏ —Å–µ—Ç—å –¥–ª—è –æ–ø–ª–∞—Ç—ã USDT:', reply_markup=network3)
        if callback_query.data == 'TRC3':
            WALLET = 'TWBv2DH5cpHP8UgRj9wdCcr2rWkJTgGJoo'
            cost = 10000000
            await bot.delete_message(callback_query.from_user.id, callback_query.message.message_id)
            await callback_query.message.answer('***–ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ —Å—Ç—Ä–æ–≥–æ 100 USDT*** –Ω–∞ –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞:\n\n'
                                                f'`{WALLET}`\n\n‚ùó***–ü–æ—Ç–æ–º –ø—Ä–∏—à–ª–∏—Ç–µ –ø—Ä–∏—à–ª–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã. –í –æ–ø–∏—Å–∞–Ω–∏–∏ –ø–æ–¥ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–º –Ω—É–∂–Ω–æ –≤—Å—Ç–∞–≤–∏—Ç—å —Ö—ç—à —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏, –∏–Ω–∞—á–µ –±–æ—Ç –Ω–µ –∑–∞—Å—á–∏—Ç–∞–µ—Ç –æ–ø–ª–∞—Ç—É. (—Å–µ—Ç—å TRC20)***',
                                                parse_mode='MARKDOWN')
        if callback_query.data == 'TON3':
            WALLET = 'UQCZWX_JeVoi9ajcpXKAp1F8soOH2YIv6HitZeGUE16gGVfk'
            cost = 10000000
            await bot.delete_message(callback_query.from_user.id, callback_query.message.message_id)
            await callback_query.message.answer('***–ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ —Å—Ç—Ä–æ–≥–æ 100 USDT*** –Ω–∞ –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞:\n\n'
                                                f'`{WALLET}`\n\n‚ùó***–ü–æ—Ç–æ–º –ø—Ä–∏—à–ª–∏—Ç–µ –ø—Ä–∏—à–ª–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã. –í –æ–ø–∏—Å–∞–Ω–∏–∏ –ø–æ–¥ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–º –Ω—É–∂–Ω–æ –≤—Å—Ç–∞–≤–∏—Ç—å —Ö—ç—à —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏, –∏–Ω–∞—á–µ –±–æ—Ç –Ω–µ –∑–∞—Å—á–∏—Ç–∞–µ—Ç –æ–ø–ª–∞—Ç—É. (—Å–µ—Ç—å TON)***',
                                                parse_mode='MARKDOWN')
        if callback_query.data == 'ARB3':
            WALLET = '0x4B908f33111e968970bD4c5b1f6CE4014ad4F92E'
            cost = 10000000
            await bot.delete_message(callback_query.from_user.id, callback_query.message.message_id)
            await callback_query.message.answer('***–ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ —Å—Ç—Ä–æ–≥–æ 100 USDT*** –Ω–∞ –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞:\n\n'
                                                f'`{WALLET}`\n\n‚ùó***–ü–æ—Ç–æ–º –ø—Ä–∏—à–ª–∏—Ç–µ –ø—Ä–∏—à–ª–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã. –í –æ–ø–∏—Å–∞–Ω–∏–∏ –ø–æ–¥ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–º –Ω—É–∂–Ω–æ –≤—Å—Ç–∞–≤–∏—Ç—å —Ö—ç—à —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏, –∏–Ω–∞—á–µ –±–æ—Ç –Ω–µ –∑–∞—Å—á–∏—Ç–∞–µ—Ç –æ–ø–ª–∞—Ç—É. (—Å–µ—Ç—å ARB)***',
                                                parse_mode='MARKDOWN')
        if callback_query.data == 'ERC3':
            WALLET = '0x4B908f33111e968970bD4c5b1f6CE4014ad4F92E'
            cost = 10000000
            await bot.delete_message(callback_query.from_user.id, callback_query.message.message_id)
            await callback_query.message.answer('***–ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ —Å—Ç—Ä–æ–≥–æ 100 USDT*** –Ω–∞ –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞:\n\n'
                                                f'`{WALLET}`\n\n‚ùó***–ü–æ—Ç–æ–º –ø—Ä–∏—à–ª–∏—Ç–µ –ø—Ä–∏—à–ª–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã. –í –æ–ø–∏—Å–∞–Ω–∏–∏ –ø–æ–¥ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–º –Ω—É–∂–Ω–æ –≤—Å—Ç–∞–≤–∏—Ç—å —Ö—ç—à —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏, –∏–Ω–∞—á–µ –±–æ—Ç –Ω–µ –∑–∞—Å—á–∏—Ç–∞–µ—Ç –æ–ø–ª–∞—Ç—É. (—Å–µ—Ç—å ERC)***',
                                                parse_mode='MARKDOWN')

        action, user_id = callback_query.data.split(':')
        user_id = int(user_id)
        if action == 'success':
            if cost == 1000000:
                if db.get_sub_status(user_id):
                    time_sub = int(time.time() + days_to_seconds(30)) - int(time.time())
                    db.set_time_sub(user_id, time_sub)
                else:
                    time_sub = int(time.time() + days_to_seconds(30))
                    db.set_time_sub(user_id, time_sub)
                    await bot.answer_callback_query(callback_query.id)
                    await bot.send_message(user_id, '‚úÖ–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–µ–æ–±—Ä–µ–ª–∏ <b>–¥–æ—Å—Ç—É–ø –Ω–∞ 1 –º–µ—Å—è—Ü</b>',
                                           parse_mode='html')

            if cost == 4500000:
                if db.get_sub_status(user_id):
                    time_sub = int(time.time() + days_to_seconds(180)) - int(time.time())
                    db.set_time_sub(user_id, time_sub)
                    await bot.answer_callback_query(callback_query.id)
                    await bot.send_message(user_id, '‚úÖ–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–µ–æ–±—Ä–µ–ª–∏ <b>–¥–æ—Å—Ç—É–ø –Ω–∞ 6 –º–µ—Å—è—Ü–µ–≤</b>',
                                           parse_mode='html')
                else:
                    time_sub = int(time.time() + days_to_seconds(180))
                    db.set_time_sub(user_id, time_sub)
                    await bot.answer_callback_query(callback_query.id)
                    await bot.send_message(user_id, '‚úÖ–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–µ–æ–±—Ä–µ–ª–∏ <b>–¥–æ—Å—Ç—É–ø –Ω–∞ 6 –º–µ—Å—è—Ü–µ–≤</b>',
                                           parse_mode='html')

            if cost == 10000000:
                if db.get_sub_status(user_id):
                    time_sub = int(time.time() + days_to_seconds(360)) - int(time.time())
                    db.set_time_sub(user_id, time_sub)
                    await bot.answer_callback_query(callback_query.id)
                    await bot.send_message(user_id, '‚úÖ–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–µ–æ–±—Ä–µ–ª–∏ <b>–¥–æ—Å—Ç—É–ø –Ω–∞ 1 –≥–æ–¥</b>',
                                           parse_mode='html')
                else:
                    time_sub = int(time.time() + days_to_seconds(360))
                    db.set_time_sub(user_id, time_sub)
                    await bot.answer_callback_query(callback_query.id)
                    await bot.send_message(user_id, '‚úÖ–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–µ–æ–±—Ä–µ–ª–∏ <b>–¥–æ—Å—Ç—É–ø –Ω–∞ 1 –≥–æ–¥</b>',
                                           parse_mode='html')

        if callback_query.data == 'invalid':
            await bot.answer_callback_query(callback_query.id)
            await bot.send_message(user_id,
                                   '‚ùå–ü–æ—Ö–æ–∂–µ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫: <b>–≤–æ–∑–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –¥–∞–Ω–Ω—ã—Ö</b>\n'
                                   '<b>–ï—Å–ª–∏</b> –≤—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –≤–µ—Ä–Ω—ã –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: @pump_supporting_bot',
                                   parse_mode='html')
    except Exception:
        pass









# PHONE NUMBER
@dp.message_handler(regexp=r'^(\+?\d{1,3})?[-\s\.]?\(?(\d{1,3})\)?[-\s\.]?(\d{3,4})[-\s\.]?(\d{4})$')
async def phone_number_handler(message: types.Message):
    # –ü–û–õ–£–ß–ï–ù–ò–ï –ò–ù–§–û–†–ú–ê–¶–ò–ò –ü–û –ù–û–ú–ï–†–£ –¢–ï–õ–ï–§–û–ù–£ –ß–ï–†–ï–ó DADATA API
    answer = message.text
    result = await dadata.clean("phone", answer)
    cont = InlineKeyboardMarkup(row_width=2)
    wh = InlineKeyboardButton("üü¢ WhatsApp", url=f"""wa.me/{result["phone"]}""")
    tg = InlineKeyboardButton("üîµ Telegram", url=f"https://t.me/{result['phone']}")
    creator = InlineKeyboardButton("üöÄ –¢–≥ —Å–æ–∑–¥–∞—Ç–µ–ª—è", url=f"https://t.me/+1A9f6ZFMJBgxMjRi")
    cont.add(wh, tg, creator)
    parsed_number = phonenumbers.parse(answer, None)
    if phonenumbers.is_valid_number(parsed_number) is True:
        await message.answer(f'üì± (–¢–µ–ª–µ—Ñ–æ–Ω: {result["number"]})\n'
                             f'‚îú ***–ù–æ–º–µ—Ä:*** `{answer}`\n'
                             f'‚îú ***–°—Ç—Ä–∞–Ω–∞:*** `{result["country"]}`\n'
                             f'‚îú ***–†–µ–≥–∏–æ–Ω \ –ì–æ—Ä–æ–¥:*** `{result["region"]}, {result["city"]}`\n'
                             f'‚îú ***–û–ø–µ—Ä–∞—Ç–æ—Ä:*** `{carrier.name_for_number(parsed_number, "ru")}\n'
                             f'‚îî ***–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å:*** `{result["timezone"]}`\n\n'
                             , parse_mode='MARKDOWN', reply_markup=cont)

    else:
        await message.answer('‚ùóÔ∏è –ù–æ–º–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω')

# EMAIL
@dp.message_handler(regexp=r'^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$')
async def email_handler(message: types.Message):
    # –ü–û–õ–£–ß–ï–ù–ò–ï –ò–ù–§–û–†–ú–ê–¶–ò–ò –ü–û EMAIL –ß–ï–†–ï–ó DADATA API
    # –ü–†–û–í–ï–ö–ê –î–û–°–¢–£–ü–ê
    if db.get_sub_status(message.from_user.id):
        answer = message.text
        result = await dadata.clean("email", answer)
        if result["qc"] == 0:
            await message.answer(f'üì® ***Email:*** `{result["email"]}`\n'
                                 f'‚îú ***–î–æ–º–µ–Ω:*** `{result["domain"]}`\n'
                                 f'‚îú ***–õ–æ–∫–∞–ª—å–Ω–∞—è —á–∞—Å—Ç—å –∞–¥—Ä–µ—Å–∞:*** `{result["local"]}`\n'
                                 f'‚îî ***–ö–ª–∞—Å—Å Email:*** `{result["type"]}`', parse_mode='MARKDOWN')
        else:
            await message.answer('‚ùóÔ∏è Email –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –æ–Ω –Ω–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω')
    else:
        await message.answer(
            f'üö® –î–æ—Å—Ç—É–ø –∑–∞–∫–æ–Ω—á–∏–ª—Å—è! {message.from_user.first_name}, –Ω–∞–º –Ω—É–∂–Ω–æ —ç—Ç–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å!\n\n',
            reply_markup=payment_keyboard1)




# (–ö–ê–î–ê–°–¢–†–û–í–´–ô –ù–û–ú–ï–†)
@dp.message_handler(lambda message: ',' in message.text)
async def kadaster_number_handler(message: types.Message):
    # –ü–û–õ–£–ß–ï–ù–ò–ï –ò–ù–§–û–†–ú–ê–¶–ò–ò –ü–û –£–õ–ò–¶–ï –ß–ï–†–ï–ó DADATA API
    # –ü–†–û–í–ï–ö–ê –î–û–°–¢–£–ü–ê
    if db.get_sub_status(message.from_user.id):
        answer = message.text
        parts = [part.strip() for part in answer.split(',')]
        parts = ' '.join(parts)
        result = await dadata.clean("address", answer)
        await message.answer(f'‚îú ***–ê–¥—Ä–µ—Å:*** `{result["result"]}`\n'
                             f'‚îú ***–£–ª–∏—Ü–∞:*** `{result["street"]}`\n'
                             f'‚îú ***–î–æ–º:*** `{result["house"]}`\n'
                             f'‚îú ***–ö–≤–∞—Ä—Ç–∏—Ä–∞:*** `{result["flat"]}`\n'
                             f'‚îú ***–ò–Ω–¥–µ–∫—Å:*** `{result["postal_code"]}`\n'
                             f'‚îú ***–û–±–ª–∞—Å—Ç—å:*** `{result["region"]}`\n'
                             f'‚îî ***–ö–∞–¥–∞—Å—Ç—Ä–æ–≤—ã–π –Ω–æ–º–µ—Ä:*** `{result["flat_cadnum"]}`', parse_mode='MARKDOWN')
    else:
        await message.answer(
            f'üö® –î–æ—Å—Ç—É–ø –∑–∞–∫–æ–Ω—á–∏–ª—Å—è! {message.from_user.first_name}, –Ω–∞–º –Ω—É–∂–Ω–æ —ç—Ç–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å!\n\n',
            reply_markup=payment_keyboard1)


# COMPANY
@dp.message_handler(commands=['company'])
async def company_handler(message: types.Message):
    global company_keyboard2
    # –ü–û–õ–£–ß–ï–ù–ò–ï –ò–ù–§–û–†–ú–ê–¶–ò–ò –ü–û –ö–û–ú–ü–ê–ù–ò–ò –ß–ï–†–ï–ó DADATA API
    # –ü–†–û–í–ï–†–ö–ê –î–û–°–¢–£–ü–ê
    if db.get_sub_status(message.from_user.id):
        try:
            comand_parse = message.text.split(maxsplit=1)
            company_keyboard = InlineKeyboardMarkup(row_width=1)
            answer = comand_parse[1]
            result = await dadata.suggest("party", answer)
            write_inf(result, 'users.json')
            useresult = read_inf('users.json')
            result = [user['value'] for user in useresult]
            for i in result:
                button = InlineKeyboardButton(text=i, callback_data=i)
                company_keyboard.add(button)
            back = InlineKeyboardButton(text='üîô –ù–∞–∑–∞–¥', callback_data='back_to_menu')
            company_keyboard.add(back)
            company_keyboard2 = company_keyboard
            await message.answer('üÜî –ù–∞–π–¥–µ–Ω—ã –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏. –í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –∫–æ–º–ø–∞–Ω–∏–π:', reply_markup=company_keyboard)
            print(result)
        except Exception:
            pass
    else:
        await message.answer(
            f'üö® –î–æ—Å—Ç—É–ø –∑–∞–∫–æ–Ω—á–∏–ª—Å—è! {message.from_user.first_name}, –Ω–∞–º –Ω—É–∂–Ω–æ —ç—Ç–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å!\n\n',
            reply_markup=payment_keyboard1)


# INN SEARCH
@dp.message_handler(commands=['inn'])
async def inn_handler(message: types.Message):
    # –ü–û–õ–£–ß–ï–ù–ò–ï –ò–ù–§–û–†–ú–ê–¶–ò–ò –ß–ï–†–ï–ó –ò–ù–ù –ö–û–ú–ü–ê–ù–ò–ò
    if db.get_sub_status(message.from_user.id):
        try:
            inn_parse = message.text.split(maxsplit=1)
            answer = inn_parse[1]
            company_keyboard = InlineKeyboardMarkup(row_width=1)
            result = dadata_for_inn.find_by_id("party", answer)
            write_inf(result, 'users.json')
            useresult = read_inf('users.json')
            result = [user['value'] for user in useresult]
            for i in result:
                button = InlineKeyboardButton(text=i, callback_data=i)
                company_keyboard.add(button)
            back = InlineKeyboardButton(text='üîô –ù–∞–∑–∞–¥', callback_data='back_to_menu')
            company_keyboard.add(back)
            await message.answer('üÜî –ù–∞–π–¥–µ–Ω—ã –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏. –í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –∫–æ–º–ø–∞–Ω–∏–π:', reply_markup=company_keyboard)
        except Exception:
            pass
    else:
        await message.answer(
            f'üö® –î–æ—Å—Ç—É–ø –∑–∞–∫–æ–Ω—á–∏–ª—Å—è! {message.from_user.first_name}, –Ω–∞–º –Ω—É–∂–Ω–æ —ç—Ç–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å!\n\n',
            reply_markup=payment_keyboard1)








# PAYMENT_PART; TON; TRX; eth;
@dp.message_handler(regexp='^0x[a-fA-F0-9]{64}$', content_types=['photo'])
async def handle_transaction_eth(message: types.Message):
    global succes_or_invalid
    global cost
    user_id = message.from_user.id
    succes_or_invalid = InlineKeyboardMarkup(inline_keyboard=[(
        InlineKeyboardButton(text='‚úÖ–£—Å–ø–µ—à–Ω–æ', callback_data=f'success:{user_id}'),
        InlineKeyboardButton(text='‚ùå–ù–µ —É—Å–ø–µ—à–Ω–æ', callback_data=f'invalid:{user_id}')
    )])
    pay_k = succes_or_invalid
    await message.forward(chat_id=GROUP_CHAT_ID)
    await message.answer('‚úÖ–û—Ç–ª–∏—á–Ω–æ! <b>–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—É–¥–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–∞ –æ—Ç 15 –º–∏–Ω—É—Ç –¥–æ 24 —á–∞—Å–æ–≤</b>\n\n'
                         '<b>–ï—Å–ª–∏</b> –±—É–¥—É—Ç –≤–æ–ø—Ä–æ—Å—ã –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: @pump_supporting_bot', parse_mode='html')
    await bot.send_message(GROUP_CHAT_ID, f'ETH {cost}', reply_markup=pay_k)

@dp.message_handler(regexp='[a-fA-F0-9]{64}$', content_types=['photo'])
async def handle_transaction_tron(message: types.Message):
    global succes_or_invalid
    global cost
    user_id = message.from_user.id
    succes_or_invalid = InlineKeyboardMarkup(inline_keyboard=[(
        InlineKeyboardButton(text='‚úÖ–£—Å–ø–µ—à–Ω–æ', callback_data=f'success:{user_id}'),
        InlineKeyboardButton(text='‚ùå–ù–µ —É—Å–ø–µ—à–Ω–æ', callback_data=f'invalid:{user_id}')
    )])
    pay_k = succes_or_invalid
    await message.forward(chat_id=GROUP_CHAT_ID)
    await message.answer('‚úÖ–û—Ç–ª–∏—á–Ω–æ! <b>–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—É–¥–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–∞ –æ—Ç 15 –º–∏–Ω—É—Ç –¥–æ 24 —á–∞—Å–æ–≤</b>\n\n'
                         '<b>–ï—Å–ª–∏</b> –±—É–¥—É—Ç –≤–æ–ø—Ä–æ—Å—ã –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: @pump_supporting_bot', parse_mode='html')
    await bot.send_message(GROUP_CHAT_ID, f'TRX {cost}', reply_markup=pay_k)

@dp.message_handler(regexp='[a-fA-F0-9]{66}$', content_types=['photo'])
async def handle_transaction_ton(message: types.Message):
    global succes_or_invalid
    user_id = message.from_user.id
    succes_or_invalid = InlineKeyboardMarkup(inline_keyboard=[(
        InlineKeyboardButton(text='‚úÖ–£—Å–ø–µ—à–Ω–æ', callback_data=f'success:{user_id}'),
        InlineKeyboardButton(text='‚ùå–ù–µ —É—Å–ø–µ—à–Ω–æ', callback_data=f'invalid:{user_id}')
    )])
    pay_k = succes_or_invalid
    await message.forward(chat_id=GROUP_CHAT_ID)
    await message.answer('‚úÖ–û—Ç–ª–∏—á–Ω–æ! <b>–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—É–¥–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–∞ –æ—Ç 15 –º–∏–Ω—É—Ç –¥–æ 24 —á–∞—Å–æ–≤</b>\n\n'
                         '<b>–ï—Å–ª–∏</b> –±—É–¥—É—Ç –≤–æ–ø—Ä–æ—Å—ã –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: @pump_supporting_bot', parse_mode='html')
    await bot.send_message(GROUP_CHAT_ID, f'TON {cost}', reply_markup=pay_k)








# TECHNICAL PART
def write_inf(data, file_name):
    data = json.dumps(data)
    data = json.loads(str(data))

    with open(file_name, 'w', encoding="utf-8") as file:
        json.dump(data, file, indent=4)

def read_inf(file_name):
    with open(file_name, 'r', encoding="utf-8") as file:
        return json.load(file)

def get_data():
    users = read_inf('users.json')
    for user in users['suggestions']:
        print(user.get('value'))
        with open("users.json", "w") as f:
            pass



if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)