import os

import phonenumbers
from aiogram import Bot, Dispatcher, F, types
from aiogram.filters import Command, StateFilter
from aiogram import Bot
from keyboards import main_keyboard, payment_keyboard, payment_keyboard1, network_keyboard, back_command_keyboard
import re
from phonenumbers import geocoder, carrier, timezone
import asyncio
from aiogram.types import FSInputFile, InlineKeyboardMarkup, InlineKeyboardButton, ContentType
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.state import StatesGroup, State
import datetime
import time
from db import Database
import json
from aiogram.enums import ParseMode
from aiogram.utils.keyboard import InlineKeyboardBuilder


from dadata import DadataAsync, Dadata


bot = Bot('YOUR BOT TOKEN')
token = 'API DADATA TOKEN'
secret = 'API SECRET KEY'
db = Database('database.db')


dp = Dispatcher(storage=MemoryStorage())
dadata = DadataAsync(token, secret)
dadata_for_inn = Dadata(token)
GROUP_CHAT_ID = 'GROUP CHAT ID'
BOT_NICKNAME = 'YOUR BOT NICKNAME'



USER_AGENTS = [
    'geoapiExercises1',
    'geoapiUserAgent2',
    'geoapiUserAgent3',
    'geoapiClient4',
    'geoapiDemoAgent5'
]


class Renting(StatesGroup):
    rent_time = State()
    send_photo = State()




# –ü–µ—Ä–µ–≤–æ–¥ –ø–æ–¥–ø–∏—Å–∫–∏ –≤ –¥–Ω–∏
def days_to_seconds(days):
    return days * 24 * 60 * 60


def time_sub_day(get_time):
    time_now = int(time.time())
    middle_time = int(get_time) - time_now
    if middle_time <= 0:
        return False
    else:
        dt = str(datetime.timedelta(seconds=middle_time))
        dt = dt.replace("days", '–¥–Ω–µ–π')
        return dt


# –í–†–ï–ú–ï–ù–ù–û–ï –§–û–¢–û
async def download_photo(file_id: str, path: str):
    file = await bot.get_file(file_id)
    await bot.download_file(file.file_path, path)



@dp.message(Command('start'))
async def start_command(message: types.Message):
    # –°–û–ó–î–ê–ï–ú –¢–ê–ë–õ–ò–¶–£ –ü–ï–†–ï–î –°–¢–ê–†–¢–û–ú
    db.create_tables()

    greeting_photo_path = 'fotos/lightning.jpg'
    await message.answer_photo(photo=FSInputFile(greeting_photo_path), caption='–û—Ç–∫—Ä–æ–π—Ç–µ –º–∏—Ä –≤–æ–∑–æ–∂–Ω–æ—Å—Ç–µ–π —Å –Ω–∞–º–∏ - –º—ã –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ, —á—Ç–æ –µ—Å—Ç—å –≤ —Å–µ—Ç–∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç –ø—Ä–µ–≤—Ä–∞—â–∞—è –æ—Ç–∫—Ä—ã—Ç—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –≤ –∑–Ω–∞–Ω–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏\n\n'
                         '<b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:</b>', parse_mode='html', reply_markup=main_keyboard())



    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Å—Ç–∞—Ä—Ç–µ –∏ –≤—ã–¥–∞—á–∞ –ø—Ä–æ–±–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞

    if (not db.user_exists(message.from_user.id)):
        db.add_user(message.from_user.id)
        db.set_nickname(message.from_user.id, message.from_user.username)
        db.set_signup(message.from_user.id, 'done')
        user_id = message.from_user.id
        if db.get_sub_status(user_id):
            success_photo_path = 'fotos/success.jpg'
            time_sub = int(time.time() + days_to_seconds(1)) - int(time.time())
            db.set_time_sub(user_id, time_sub)
            await message.answer_photo(photo=FSInputFile(success_photo_path), caption=f'‚úÖ <b>–í–∞–º –±—ã–ª –≤—ã–¥–∞–Ω –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–µ–æ–¥ –Ω–∞ 1 –¥–µ–Ω—å</b>\n\n'
                                                                                     f'üéâ <i>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º</i>', parse_mode='html', reply_markup=back_command_keyboard())
        else:
            success_photo_path = 'fotos/success.jpg'
            time_sub = int(time.time() + days_to_seconds(1))
            db.set_time_sub(user_id, time_sub)
            await message.answer_photo(photo=FSInputFile(success_photo_path),
                                       caption=f'‚úÖ <b>–í–∞–º –±—ã–ª –≤—ã–¥–∞–Ω –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–µ–æ–¥ –Ω–∞ 1 –¥–µ–Ω—å</b>\n\n'
                                               f'üéâ <i>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º</i>', parse_mode='html', reply_markup=back_command_keyboard())
        start_command = message.text
        referrer_id = str(start_command[7:])
        if str(referrer_id) != "":
            if str(referrer_id) != str(message.from_user.id):
                db.add_user(message.from_user.id, referrer_id)
                db.set_nickname(message.from_user.id, message.from_user.username)
                db.set_signup(message.from_user.id, 'done')
                user_id = message.from_user.id
                if db.get_sub_status(user_id):
                    time_sub = int(time.time() + days_to_seconds(1)) - int(time.time())
                    db.set_time_sub(user_id, time_sub)
                    await message.answer_photo(photo=FSInputFile(success_photo_path),
                                               caption=f'‚úÖ <b>–í–∞–º –±—ã–ª –≤—ã–¥–∞–Ω –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–µ–æ–¥ –Ω–∞ 1 –¥–µ–Ω—å</b>\n\n'
                                                       f'üéâ <i>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º</i>', parse_mode='html', reply_markup=back_command_keyboard())
                else:
                    time_sub = int(time.time() + days_to_seconds(1))
                    db.set_time_sub(user_id, time_sub)
                    await message.answer_photo(photo=FSInputFile(success_photo_path),
                                               caption=f'‚úÖ <b>–í–∞–º –±—ã–ª –≤—ã–¥–∞–Ω –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–µ–æ–¥ –Ω–∞ 1 –¥–µ–Ω—å</b>\n\n'
                                                       f'üéâ <i>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º</i>', parse_mode='html', reply_markup=back_command_keyboard())
                try:
                    await bot.send_photo(referrer_id, photo=FSInputFile(success_photo_path),
                                           caption="‚úÖ <b>–ü–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.</b>\n\n <i>üéâ –í—ã –ø–æ–ª—É—á–∏–ª–∏ –¥–æ—Å—Ç—É–ø –Ω–∞ 10 –¥–µ–Ω–µ–π! –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º</i>", parse_mode='html', reply_markup=back_command_keyboard())
                    if db.get_sub_status(referrer_id):
                        time_sub = int(time.time() + days_to_seconds(10)) - int(time.time())
                        db.set_time_sub(referrer_id, time_sub)
                    else:
                        time_sub = int(time.time() + days_to_seconds(10))
                        db.set_time_sub(referrer_id, time_sub)
                except:
                    pass
            else:
                pass
        else:
            pass
    else:
        if db.get_sub_status(message.from_user.id):
            success_photo_path = 'fotos/success.jpg'
            await message.answer_photo(photo=FSInputFile(success_photo_path),
                                       caption=f'‚úÖ <b>–ï—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É</b>', parse_mode='html', reply_markup=back_command_keyboard())
        else:
            error_photo_path = 'fotos/error.jpg'
            await message.answer_photo(photo=FSInputFile(error_photo_path),
                caption=f'üö® <b>–î–æ—Å—Ç—É–ø –∑–∞–∫–æ–Ω—á–∏–ª—Å—è! {message.from_user.first_name}, –Ω–∞–º –Ω—É–∂–Ω–æ —ç—Ç–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å!</b>\n\n', reply_markup=payment_keyboard1())





@dp.callback_query(lambda F: True)
async def callback_handler(callback_query: types.CallbackQuery, state: FSMContext):
    # REQUEST COMMANDS

    if callback_query.data == 'requests_commands':
        questions_photo_path = 'fotos/questions.jpg'
        await bot.delete_message(callback_query.from_user.id, callback_query.message.message_id)
        await callback_query.message.answer_photo(photo=FSInputFile(questions_photo_path), caption='‚¨áÔ∏è ***–ü—Ä–∏–º–µ—Ä—ã –∫–æ–º–∞–Ω–¥ –¥–ª—è –≤–≤–æ–¥–∞:***\n\n'
                                            'üì± `+79999999999` - –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n'
                                            'üì® `elonmusk@spacex.com` - –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ Email\n'
                                            'üèò `–º–æ—Å–∫–≤–∞, —Å—É—Ö–æ–Ω—Å–∫–∞—è, 11, 89` - –Ω–∞–π—Ç–∏ ***–∫–∞–¥–∞—Å—Ç—Ä–æ–≤—ã–π –Ω–æ–º–µ—Ä*** –≤ —Ç–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ!!!\n\n'
                                            'üèõ `/company –°–±–µ—Ä–±–∞–Ω–∫` - –ø–æ–∏—Å–∫ –ø–æ –∫–æ–º–ø–∞–Ω–∏–∏\n'
                                            'üìë `/inn 123456789123` - –ø–æ–∏—Å–∫ –ø–æ –ò–ù–ù\n',
                                            parse_mode='MARKDOWN', reply_markup=back_command_keyboard())

    # BACK TO MENU
    if callback_query.data == 'back_to_menu':
        greeting_photo_path = 'fotos/lightning.jpg'
        await bot.delete_message(callback_query.from_user.id, callback_query.message.message_id)
        await callback_query.message.answer_photo(photo=FSInputFile(greeting_photo_path),
                                   caption='–û—Ç–∫—Ä–æ–π—Ç–µ –º–∏—Ä –≤–æ–∑–æ–∂–Ω–æ—Å—Ç–µ–π —Å –Ω–∞–º–∏ - –º—ã –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ, —á—Ç–æ –µ—Å—Ç—å –≤ —Å–µ—Ç–∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç –ø—Ä–µ–≤—Ä–∞—â–∞—è –æ—Ç–∫—Ä—ã—Ç—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –≤ –∑–Ω–∞–Ω–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏\n\n'
                                           '<b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:</b>', parse_mode='html', reply_markup=main_keyboard())

    # COMPANY SEARCH
    if callback_query.data.startswith('company_'):
        company_name = callback_query.data.replace('company_', '', 1)

        error_photo_path = 'fotos/error.jpg'
        company_photo_path = 'fotos/invite.jpg'
        try:
            result = await dadata.suggest("party", company_name)
            write_inf(result, 'users.json')
            useresult = read_inf('users.json')

            for user in useresult:
                kpp = user['data']['kpp']
                inn = user['data']['inn']
                ogrn = user['data']['ogrn']
                address = user['data']['address']['value']
                country_name = user['data']['address']['data']['country']
                main = user['data']['management']['name']
                post_roll = user['data']['management']['post']
                post_roll_date = datetime.datetime.fromtimestamp(user['data']['management']['start_date'] / 1000)
                post_roll_date_ref = post_roll_date.strftime('%Y-%m-%d %H:%M:%S')
                type_of_company = user['data']['type']
                data_ogrn = datetime.datetime.fromtimestamp(user['data']['ogrn_date'] / 1000)
                data_ogrn_ref = data_ogrn.strftime('%Y-%m-%d %H:%M:%S')

                def buttons():
                    builder = InlineKeyboardBuilder()
                    builder.add(
                        InlineKeyboardButton(
                            text="üöÄ –¢–≥ —Å–æ–∑–¥–∞—Ç–µ–ª—è",
                            url=f"https://t.me/+1A9f6ZFMJBgxMjRi"
                        ),
                        InlineKeyboardButton(
                            text="üîô –ù–∞–∑–∞–¥",
                            callback_data='back_to_menu'
                        )
                    )
                    builder.adjust(1)
                    return builder.as_markup()

                await callback_query.message.answer_photo(photo=FSInputFile(company_photo_path), caption=f'üõ†Ô∏è ***–ö–æ–º–ø–∞–Ω–∏—è:*** {company_name}\n'
                                                    f'‚îú ***–ê–¥—Ä–µ—Å –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è:*** `{address}`\n'
                                                    f'‚îú ***–ö–ü–ü –∫–æ–º–ø–∞–Ω–∏–∏:*** `{kpp}`\n'
                                                    f'‚îú ***–ò–ù–ù –∫–æ–º–ø–∞–Ω–∏–∏:*** `{inn}`\n'
                                                    f'‚îú ***–û–ì–†–ù –∫–æ–º–ø–∞–Ω–∏–∏:*** `{ogrn}`\n'
                                                    f'‚îî ***–¢–∏–ø –∫–æ–º–ø–∞–Ω–∏–∏:*** `{type_of_company}`\n\n'
                                                    f'üë∑üèª‚Äç‚ôÇÔ∏è ***–£–ø—Ä–∞–≤–ª–µ–Ω–µ—Ü:*** {main}\n'
                                                    f'üèÜ ***–î–æ–ª–∂–Ω–æ—Å—Ç—å:*** {post_roll}\n'
                                                    f'üëë ***–î–∞—Ç–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —É–ø—Ä–∞–≤–ª–µ–Ω—Ü–∞:*** {post_roll_date_ref}\n'
                                                    f'üìÑ ***–î–∞—Ç–∞ –æ–≥—Ä–Ω:*** {data_ogrn_ref}\n'
                                                    f'üåé ***–°—Ç—Ä–∞–Ω–∞:*** {country_name}', parse_mode='MARKDOWN', reply_markup=buttons())
        except Exception:
            await callback_query.message.answer_photo(
                photo=FSInputFile(error_photo_path),
                caption=f'‚ùóÔ∏è ***–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–ø–∞–Ω–∏–∏ / –∫–æ–º–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞:***',
                parse_mode='MARKDOWN',
                reply_markup=back_command_keyboard()
            )


    # VIEW PROFILE
    if callback_query.data == 'my_acc':
        user_sub = time_sub_day(db.get_time_sub(callback_query.from_user.id))
        if user_sub == False:
            user_sub = '‚ùå ***–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç***'
        user_sub = f'***{user_sub}***'

        profile_photo_path = 'fotos/profile.jpg'
        await callback_query.message.answer_photo(photo=FSInputFile(profile_photo_path), caption=f'üë®‚Äçüíª ***–í–∞—à –∫–∞–±–∏–Ω–µ—Ç:***\n'
                                                                                        f'‚Ä¢ –í–∞—à –Ω–∏–∫–Ω–µ–π–º: {callback_query.from_user.first_name}\n'
                                                                                        f'‚Ä¢ –í–∞—à ID: {callback_query.message.from_user.id}\n\n'
                                                                                        f'üìä ***–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:***\n'
                                                                                        f'‚Ü≥ üë§ –†–µ—Ñ–µ—Ä–∞–ª–æ–≤: ***{db.get_count_refers(callback_query.from_user.id)}***\n'
                                                                                        f'‚Ü≥ üîã –ü–æ–¥–ø–∏—Å–∫–∞: ***{user_sub}***\n\n'
                                                                                        f'üí≥ ***–ë–∞–ª–∞–Ω—Å:***\n'
                                                                                        f'‚Ü≥ üí∞ –ö–æ—à–µ–ª–µ–∫: ***{db.get_user_wallet(callback_query.from_user.id)} USDT***\n\n'
                                                                                        f'üë§ ***–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:***\n'
                                                                                        f' ‚Ü≥ ___–ó–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ –≤ –±–æ—Ç–∞ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ 10 –î–Ω–µ–π –î–æ—Å—Ç—É–ø–∞!___\n\n'
                                                                                        f'üöÄ –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: [–°—Å—ã–ª–∫–∞](https://t.me/{BOT_NICKNAME}?start={callback_query.from_user.id})', parse_mode='MARKDOWN', reply_markup=payment_keyboard1())


    if callback_query.data == 'partners_refs':
        refferal_photo_path = 'fotos/invite.jpg'
        await callback_query.message.answer_photo(photo=FSInputFile(refferal_photo_path),
                                                  caption=f'üßë‚Äçüßë‚Äçüßí <b>–ü–∞—Ä—Ç–Ω—ë—Ä—ã</b> ‚Äî —ç—Ç–æ –ª—é–¥–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø–µ—Ä–µ—à–ª–∏ –ø–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ –∏ –Ω–∞—á–∞–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–∞–Ω–Ω—ã–º –±–æ—Ç–æ–º.\n\n'
                                                          f'ü§ñ <b>–ó–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ –≤ –±–æ—Ç–∞ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ 10 –î–Ω–µ–π –¥–æ—Å—Ç—É–ø–∞!</b>\n\nüöÄ <b>–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:</b> https://t.me/{BOT_NICKNAME}?start={callback_query.from_user.id}\n\n'
                                                          f'üë• <b>–í—ã –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏ –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤:</b> {db.get_count_refers(callback_query.from_user.id)}\n\n'
                                                          f'<i>–ü—Ä–∏–≤–æ–¥–∏ –¥—Ä—É–∑–µ–π - –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ –≤–º–µ—Å—Ç–µ!</i>',
                                                  parse_mode='html', reply_markup=back_command_keyboard())


    # REFERAL SISTEM
    # –ü–û–ü–û–õ–ù–ï–ù–ò–ï –ö–û–®–ï–õ–¨–ö–ê
    if callback_query.data == 'pay_the_call':
        bank_photo_path = 'fotos/bank.jpg'
        await callback_query.message.answer_photo(photo=FSInputFile(bank_photo_path),
                                                      caption=f'ü§ñ –ù–∞—à —Ç–∞—Ä–∏—Ñ:\n1 –º–µ—Å—è—Ü = 1 USDT\n6 –º–µ—Å—è—Ü–µ–≤ = 5 USDT\n1 –≥–æ–¥ = 10 USDT\n\n<b>‚ùó –ß—Ç–æ–±—ã –ø–æ–ø–æ–ª–Ω–∏—Ç—å –¥–æ—Å—Ç—É–ø –Ω—É–∂–Ω–æ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –∫–æ—à–µ–ª–µ–∫. –í—ã –º–æ–∂–µ—Ç–µ –≤–≤–æ–¥–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥—ã –æ—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞.</b>\n\nüíµ –ö–æ—à–µ–ª–µ–∫: <b>{db.get_user_wallet(callback_query.from_user.id)} USDT</b>\n\n<i>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ:</i>',
                                                      reply_markup=payment_keyboard(), parse_mode='html')

    if callback_query.data == 'month':
            success_photo_path = 'fotos/success.jpg'
            fail_photo_path = 'fotos/error.jpg'
            if float(db.get_user_wallet(callback_query.from_user.id)) >= 1:
                db.set_user_wallet_take(callback_query.from_user.id, 1)
                if db.get_sub_status(callback_query.from_user.id):
                    time_sub = int(time.time() + days_to_seconds(30)) - int(time.time())
                    db.set_time_sub(callback_query.from_user.id, time_sub)
                    await bot.send_photo(photo=FSInputFile(success_photo_path), chat_id=callback_query.from_user.id,
                                         caption='‚úÖ <b>–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–µ–æ–±—Ä–µ–ª–∏ –¥–æ—Å—Ç—É–ø –Ω–∞ 1 –º–µ—Å—è—Ü</b>\n\n'
                                                 '<i>üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!</i>', parse_mode='html', reply_markup=back_command_keyboard())
                else:
                    time_sub = int(time.time() + days_to_seconds(30))
                    db.set_time_sub(callback_query.from_user.id, time_sub)
                    await bot.send_photo(photo=FSInputFile(success_photo_path), chat_id=callback_query.from_user.id,
                                         caption='‚úÖ <b>–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–µ–æ–±—Ä–µ–ª–∏ –¥–æ—Å—Ç—É–ø –Ω–∞ 1 –º–µ—Å—è—Ü</b>\n\n'
                                                 '<i>üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!</i>', parse_mode='html', reply_markup=back_command_keyboard())
            else:
                await callback_query.message.answer_photo(photo=FSInputFile(success_photo_path),
                                                          caption=f'‚ùå <b>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –∫–æ—à–µ–ª—å–∫–µ!</b>\n\n'
                                                                  f'<i>üëá –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –∫–æ—à–µ–ª–µ–∫ –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ —á—Ç–æ–±—ã –æ–ø–ª–∞—Ç–∏—Ç—å –¥–æ—Å—Ç—É–ø!</i>',
                                                          parse_mode='html',
                                                          reply_markup=payment_keyboard1())

    if callback_query.data == 'halfyear':
            success_photo_path = 'fotos/success.jpg'
            fail_photo_path = 'fotos/error.jpg'
            if float(db.get_user_wallet(callback_query.from_user.id)) >= 5:
                db.set_user_wallet_take(callback_query.from_user.id, 5)
                if db.get_sub_status(callback_query.from_user.id):
                    time_sub = int(time.time() + days_to_seconds(180)) - int(time.time())
                    db.set_time_sub(callback_query.from_user.id, time_sub)
                    await bot.send_photo(photo=FSInputFile(success_photo_path), chat_id=callback_query.from_user.id,
                                         caption='‚úÖ <b>–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–µ–æ–±—Ä–µ–ª–∏ –¥–æ—Å—Ç—É–ø –Ω–∞ 6 –º–µ—Å—è—Ü–µ–≤</b>\n\n'
                                                 '<i>üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!</i>', parse_mode='html', reply_markup=back_command_keyboard())
                else:
                    time_sub = int(time.time() + days_to_seconds(180))
                    db.set_time_sub(callback_query.from_user.id, time_sub)
                    await bot.send_photo(photo=FSInputFile(success_photo_path), chat_id=callback_query.from_user.id,
                                         caption='‚úÖ <b>–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–µ–æ–±—Ä–µ–ª–∏ –¥–æ—Å—Ç—É–ø –Ω–∞ 6 –º–µ—Å—è—Ü–µ–≤</b>\n\n'
                                                 '<i>üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!</i>', parse_mode='html', reply_markup=back_command_keyboard())
            else:
                await callback_query.message.answer_photo(photo=FSInputFile(fail_photo_path),
                                                          caption=f'‚ùå <b>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –∫–æ—à–µ–ª—å–∫–µ!</b>\n\n'
                                                                  f'<i>üëá –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –∫–æ—à–µ–ª–µ–∫ –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ —á—Ç–æ–±—ã –æ–ø–ª–∞—Ç–∏—Ç—å –¥–æ—Å—Ç—É–ø!</i>',
                                                          parse_mode='html', reply_markup=payment_keyboard1())

    if callback_query.data == 'year':
            success_photo_path = 'fotos/success.jpg'
            fail_photo_path = 'fotos/error.jpg'
            if float(db.get_user_wallet(callback_query.from_user.id)) >= 10:
                db.set_user_wallet_take(callback_query.from_user.id, 10)
                if db.get_sub_status(callback_query.from_user.id):
                    time_sub = int(time.time() + days_to_seconds(365)) - int(time.time())
                    db.set_time_sub(callback_query.from_user.id, time_sub)
                    await bot.send_photo(photo=FSInputFile(success_photo_path), chat_id=callback_query.from_user.id,
                                         caption='‚úÖ <b>–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–µ–æ–±—Ä–µ–ª–∏ –¥–æ—Å—Ç—É–ø –Ω–∞ 1 –≥–æ–¥</b>\n\n'
                                                 '<i>üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!</i>', parse_mode='html', reply_markup=back_command_keyboard())
                else:
                    time_sub = int(time.time() + days_to_seconds(365))
                    db.set_time_sub(callback_query.from_user.id, time_sub)
                    await bot.send_photo(photo=FSInputFile(success_photo_path), chat_id=callback_query.from_user.id,
                                         caption='‚úÖ <b>–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–µ–æ–±—Ä–µ–ª–∏ –¥–æ—Å—Ç—É–ø –Ω–∞ 1 –≥–æ–¥</b>\n\n'
                                                 '<i>üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!</i>', parse_mode='html', reply_markup=back_command_keyboard())
            else:
                await callback_query.message.answer_photo(photo=FSInputFile(fail_photo_path),
                                                          caption=f'‚ùå <b>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –∫–æ—à–µ–ª—å–∫–µ!</b>\n\n'
                                                                  f'<i>üëá –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –∫–æ—à–µ–ª–µ–∫ –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ —á—Ç–æ–±—ã –æ–ø–ª–∞—Ç–∏—Ç—å –¥–æ—Å—Ç—É–ø!</i>',
                                                          parse_mode='html', reply_markup=payment_keyboard1())

    if callback_query.data == 'bye_loot':
            card_photo_path = 'fotos/bank_cards.jpg'
            await callback_query.message.answer_photo(photo=FSInputFile(card_photo_path),
                                                      caption='ü§ñ <b>–í—ã–±–µ—Ä–∏ —Å–µ—Ç—å –¥–ª—è –æ–ø–ª–∞—Ç—ã USDT:</b>',
                                                      parse_mode='html',
                                                      reply_markup=network_keyboard())

    if callback_query.data == 'TON':
            await bot.delete_message(callback_query.from_user.id, callback_query.message.message_id)
            card_photo_path = 'fotos/bank_cards.jpg'
            db.set_wallet(callback_query.from_user.id, 'UQCZWX_JeVoi9ajcpXKAp1F8soOH2YIv6HitZeGUE16gGVfk')
            db.set_network(callback_query.from_user.id, 'TON')
            await state.set_state(Renting.rent_time)
            await callback_query.message.answer_photo(photo=FSInputFile(card_photo_path),
                                                      caption='ü§ñ <b>–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –Ω–∞ –∫–æ—à–µ–ª–µ–∫ (–≤ USDT, –±–µ–∑ —Ç–æ—á–µ–∫ –∏ –∑–∞–ø—è—Ç—ã—Ö):</b>',
                                                      parse_mode='html', reply_markup=back_command_keyboard())

    if callback_query.data == 'TRC':
            await bot.delete_message(callback_query.from_user.id, callback_query.message.message_id)
            card_photo_path = 'fotos/bank_cards.jpg'
            db.set_wallet(callback_query.from_user.id, 'TWBv2DH5cpHP8UgRj9wdCcr2rWkJTgGJoo')
            db.set_network(callback_query.from_user.id, 'TRC')
            await state.set_state(Renting.rent_time)
            await callback_query.message.answer_photo(photo=FSInputFile(card_photo_path),
                                                      caption='ü§ñ <b>–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –Ω–∞ –∫–æ—à–µ–ª–µ–∫ (–≤ USDT, –±–µ–∑ —Ç–æ—á–µ–∫ –∏ –∑–∞–ø—è—Ç—ã—Ö):</b>',
                                                      parse_mode='html', reply_markup=back_command_keyboard())

    if callback_query.data == 'ERC':
            await bot.delete_message(callback_query.from_user.id, callback_query.message.message_id)
            card_photo_path = 'fotos/bank_cards.jpg'
            db.set_wallet(callback_query.from_user.id, '0x4B908f33111e968970bD4c5b1f6CE4014ad4F92E')
            db.set_network(callback_query.from_user.id, 'ERC')
            await state.set_state(Renting.rent_time)
            await callback_query.message.answer_photo(photo=FSInputFile(card_photo_path),
                                                      caption='ü§ñ <b>–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –Ω–∞ –∫–æ—à–µ–ª–µ–∫ (–≤ USDT, –±–µ–∑ —Ç–æ—á–µ–∫ –∏ –∑–∞–ø—è—Ç—ã—Ö):</b>',
                                                      parse_mode='html', reply_markup=back_command_keyboard())



    # –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–ª–∞—Ç—ã –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    try:
            action, user_id = callback_query.data.split(':')
            user_id = int(user_id)
            rent = float(db.get_rent(user_id))
            message_photo_path = 'fotos/message.jpg'
            if action == 'success':
                db.set_user_wallet_make(user_id, rent)
                await bot.send_photo(photo=FSInputFile(message_photo_path), chat_id=user_id,
                                     caption=f'‚úÖ <b>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞ –∫–æ—à–µ–ª–µ–∫ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ!</b>\n\n'
                                             f'üíµ –ö–æ—à–µ–ª–µ–∫: <b>{db.get_user_wallet(user_id)} USDT</b>', parse_mode='html',
                                     reply_markup=back_command_keyboard())

            if action == 'invalid':
                error_photo_path = 'fotos/error.jpg'
                await bot.answer_callback_query(callback_query.id)
                await bot.send_photo(photo=FSInputFile(error_photo_path), chat_id=user_id,
                                     caption='‚ùå <b>–ü–æ—Ö–æ–∂–µ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –í–æ–∑–º–æ–∂–Ω–æ –≤–æ–∑–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –¥–∞–Ω–Ω—ã—Ö.</b>\n\n'
                                             '<i>–ï—Å–ª–∏ –≤—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –≤–µ—Ä–Ω—ã –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: @pump_supporting_bot</i>',
                                     parse_mode='html', reply_markup=back_command_keyboard())
    except Exception:
        pass




# –ë–õ–û–ö –û–ü–õ–ê–¢–´
def calculate_sum_from_rubs_to_dollars(num):
    return round(num / 90.00, 2)


@dp.message(Renting.rent_time)
async def loot_for_wallet(message: types.Message, state: FSMContext):
    bank_photo_path = 'fotos/bank.jpg'
    if message.text.isdigit():
        await state.update_data(rent_time=float(message.text))
        await state.clear()
        await state.set_state(Renting.send_photo)
        db.set_rent(message.from_user.id, float(message.text))
        await message.answer_photo(photo=FSInputFile(bank_photo_path), caption=f'ü§ñ ***–ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –Ω–∏–∂–µ –Ω–∞ –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞:***\n\n'
                             f'`{db.get_wallet(message.from_user.id)}`\n\n'
                             f'‚ùó ***–ü–æ—Ç–æ–º –ø—Ä–∏—à–ª–∏—Ç–µ –ø—Ä–∏—à–ª–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã. –í –æ–ø–∏—Å–∞–Ω–∏–∏ –ø–æ–¥ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–º –Ω—É–∂–Ω–æ –≤—Å—Ç–∞–≤–∏—Ç—å —Ö—ç—à —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏, –∏–Ω–∞—á–µ –±–æ—Ç –Ω–µ –∑–∞—Å—á–∏—Ç–∞–µ—Ç –æ–ø–ª–∞—Ç—É. (—Å–µ—Ç—å {db.get_network(message.from_user.id)})***\n\n'
                             f'üíµ –ö –æ–ø–ª–∞—Ç–µ: ***{db.get_rent(message.from_user.id)} USDT***', parse_mode='MARKDOWN', reply_markup=back_command_keyboard())



# –û—Å—Ç–∞–Ω–æ–≤–∫–∞ state Renting.send_photo
@dp.callback_query(Renting.send_photo)
async def stop_send_photo(callback_query: types.CallbackQuery, state: FSMContext):
    success_photo_path = 'fotos/success.jpg'

    await state.clear()
    await callback_query.message.answer_photo(photo=FSInputFile(success_photo_path),
                                              caption="‚úÖ ***–û–ø–ª–∞—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.*** \n\n"
                                                      "___–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –ª—é–±—É—é –∫–Ω–æ–ø–∫—É —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.___",
                                              parse_mode="MARKDOWN", reply_markup=back_command_keyboard())


# PAYMENT_PART; TON; TRX; eth;
@dp.message(F.photo, Renting.send_photo)
async def transaction_handle(message: types.Message, state: FSMContext):
    error_photo_path = 'fotos/error.jpg'

    # –ü–†–û–í–†–ö–ê –•–≠–®–ê
    try:
        if message.caption is None:
            await message.answer_photo(photo=FSInputFile(error_photo_path),
                                       caption='‚ùó ***–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—Å—Ç–∞–≤—å—Ç–µ –≤ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ–¥ —Ñ–æ—Ç–æ —Ö–µ—à —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.***',
                                       parse_mode='MARKDOWN', reply_markup=back_command_keyboard())

        if re.match(r'^0x[a-fA-F0-9]{64}$', message.caption) or re.match(r'^[a-fA-F0-9]{64}$', message.caption) or re.match(r'^[a-fA-F0-9]{66}$', message.caption):
            await state.clear()

            success_photo_path = 'fotos/success.jpg'
            user_id = message.from_user.id
            def succes_or_invalid2():
                builder = InlineKeyboardBuilder()
                builder.add(
                    InlineKeyboardButton(text='‚úÖ –£—Å–ø–µ—à–Ω–æ', callback_data=f'success:{user_id}'),
                    InlineKeyboardButton(text='‚ùå –ù–µ —É—Å–ø–µ—à–Ω–æ', callback_data=f'invalid:{user_id}')
                )
                builder.adjust(2)
                return builder.as_markup()


            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–∞–ø–∫—É user_photos (–≤—Ä–µ–º–µ–Ω–Ω–æ)
            await download_photo(message.photo[-1].file_id, f"user_photos/{message.photo[-1].file_id}.jpg")


            pay_k = succes_or_invalid2()

            # –û–¢–ü–†–ê–í–ö–ê –°–û–û–ë–©–ï–ù–ò–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø –í –ì–†–£–ü–ü–£
            await message.forward(chat_id=GROUP_CHAT_ID)
            await message.answer_photo(photo=FSInputFile(success_photo_path), caption='‚úÖ <b>–û—Ç–ª–∏—á–Ω–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—É–¥–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–∞ –æ—Ç 15 –º–∏–Ω—É—Ç –¥–æ 24 —á–∞—Å–æ–≤</b>\n\n'
                                     '<i>–ï—Å–ª–∏ –±—É–¥—É—Ç –≤–æ–ø—Ä–æ—Å—ã –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: @your_bot</i>', parse_mode='html', reply_markup=back_command_keyboard())
            await bot.send_photo(photo=FSInputFile(f'user_photos/{message.photo[-1].file_id}.jpg'), chat_id=GROUP_CHAT_ID, caption=f'***üîî –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–ø–ª–∞—Ç–µ:***\n\n NETWORK: ***{db.get_network(message.from_user.id)}***\n PRICE: ***{db.get_rent(message.from_user.id)} USDT***\n HASh: `{message.caption}`', reply_markup=pay_k, parse_mode='MARKDOWN')

            # –£–î–ê–õ–Ø–ï–ú –í–†–ï–ú–ï–ù–ù–û–ï –§–û–¢–û
            os.remove(f'user_photos/{message.photo[-1].file_id}.jpg')
        else:
            await message.answer_photo(photo=FSInputFile(error_photo_path),
                                       caption='‚ùó ***–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—Å—Ç–∞–≤—å—Ç–µ –≤ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ–¥ —Ñ–æ—Ç–æ —Ö–µ—à —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.***',
                                       parse_mode='MARKDOWN', reply_markup=back_command_keyboard())
    except Exception:
        await message.answer('ERROR')








# PHONE NUMBER
@dp.message(F.text.regexp(r'^[\+\d\s\-\(\)\.]{1,20}$'))
async def phone_number_handler(message: types.Message):
    # –ü–û–õ–£–ß–ï–ù–ò–ï –ò–ù–§–û–†–ú–ê–¶–ò–ò –ü–û –ù–û–ú–ï–†–£ –¢–ï–õ–ï–§–û–ù–£ –ß–ï–†–ï–ó DADATA API
    answer = message.text
    person_photo_path = 'fotos/profile.jpg'
    error_photo_path = 'fotos/error.jpg'
    try:
        if answer.isdigit() and len(answer) <= 5:

            await message.answer_photo(photo=FSInputFile(person_photo_path), caption=
                f"üìû ***–≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–π/—Å–ª—É–∂–µ–±–Ω—ã–π –Ω–æ–º–µ—Ä:*** `{answer}`\n\n"
                "‚ö†Ô∏è ___–í–æ–∑–º–æ–∂–Ω–æ, —ç—Ç–æ –Ω–æ–º–µ—Ä —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π —Å–ª—É–∂–±—ã (–ú–ß–°, –ø–æ–ª–∏—Ü–∏—è, —Å–∫–æ—Ä–∞—è).___",
                parse_mode="MARKDOWN", reply_markup=back_command_keyboard()
            )
            return

        result = await dadata.clean("phone", answer)

        if not result or "phone" not in result:
            await message.answer_photo(photo=FSInputFile(error_photo_path), caption="‚ùóÔ∏è ***–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–æ–º–µ—Ä***", parse_mode='MARKDOWN', reply_markup=back_command_keyboard())
            return


        def buttons():
            builder = InlineKeyboardBuilder()
            builder.add(
                InlineKeyboardButton(text="üü¢ WhatsApp", url=f"""wa.me/{result["phone"]}"""),
                InlineKeyboardButton(text="üîµ Telegram", url=f"https://t.me/{result['phone']}"),
                InlineKeyboardButton(text="üöÄ –¢–≥ —Å–æ–∑–¥–∞—Ç–µ–ª—è", url=f"https://t.me/+1A9f6ZFMJBgxMjRi"),
                InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data='back_to_menu')
            )
            builder.adjust(3, 1)
            return builder.as_markup()


        parsed_number = phonenumbers.parse(answer, None)
        if phonenumbers.is_valid_number(parsed_number) is True:
            await message.answer_photo(photo=FSInputFile(person_photo_path), caption=f'üì± (–¢–µ–ª–µ—Ñ–æ–Ω: {result["number"]})\n'
                                 f'‚îú ***–ù–æ–º–µ—Ä:*** `{answer}`\n'
                                 f'‚îú ***–°—Ç—Ä–∞–Ω–∞:*** `{result["country"]}`\n'
                                 f'‚îú ***–†–µ–≥–∏–æ–Ω \ –ì–æ—Ä–æ–¥:*** `{result["region"]}, {result["city"]}`\n'
                                 f'‚îú ***–û–ø–µ—Ä–∞—Ç–æ—Ä:*** `{carrier.name_for_number(parsed_number, "ru")}`\n'
                                 f'‚îî ***–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å:*** `{result["timezone"]}`\n\n'
                                 , parse_mode='MARKDOWN', reply_markup=buttons())

        else:
            await message.answer_photo(photo=FSInputFile(error_photo_path), caption='‚ùóÔ∏è –ù–æ–º–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω', parse_mode='MARKDOWN', reply_markup=back_command_keyboard())
    except Exception:
        await message.answer_photo(photo=FSInputFile(error_photo_path), caption=f'‚ùóÔ∏è <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–æ–º–µ—Ä–∞:</b>', parse_mode='html', reply_markup=back_command_keyboard())



# EMAIL
@dp.message(F.text.regexp(r'^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$'))
async def email_handler(message: types.Message):
    # –ü–û–õ–£–ß–ï–ù–ò–ï –ò–ù–§–û–†–ú–ê–¶–ò–ò –ü–û EMAIL –ß–ï–†–ï–ó DADATA API
    # –ü–†–û–í–ï–ö–ê –î–û–°–¢–£–ü–ê
    error_photo_path = 'fotos/error.jpg'

    if db.get_sub_status(message.from_user.id):
        answer = message.text
        try:
            result = await dadata.clean("email", answer)

            def buttons():
                builder = InlineKeyboardBuilder()
                builder.add(
                    InlineKeyboardButton(
                        text="üöÄ –¢–≥ —Å–æ–∑–¥–∞—Ç–µ–ª—è",
                        url=f"https://t.me/+1A9f6ZFMJBgxMjRi"
                    ),
                    InlineKeyboardButton(
                        text="üîô –ù–∞–∑–∞–¥",
                        callback_data='back_to_menu'
                    )
                )
                return builder.as_markup()

            if result["qc"] == 0:
                await message.answer(f'üì® ***Email:*** `{result["email"]}`\n'
                                     f'‚îú ***–î–æ–º–µ–Ω:*** `{result["domain"]}`\n'
                                     f'‚îú ***–õ–æ–∫–∞–ª—å–Ω–∞—è —á–∞—Å—Ç—å –∞–¥—Ä–µ—Å–∞:*** `{result["local"]}`\n'
                                     f'‚îî ***–ö–ª–∞—Å—Å Email:*** `{result["type"]}`', parse_mode='MARKDOWN', reply_markup=buttons())
            else:
                await message.answer_photo(photo=FSInputFile(error_photo_path), caption='‚ùóÔ∏è ***Email –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –æ–Ω –Ω–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω***', parse_mode='MARKDOWN', reply_markup=back_command_keyboard())

        except Exception:
            await message.answer_photo(FSInputFile(error_photo_path),
                                       caption=f'‚ùóÔ∏è ***–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ email:***',
                                       parse_mode='MARKDOWN', reply_markup=back_command_keyboard())
    else:
        await message.answer_photo(photo=FSInputFile(error_photo_path), caption=
            f'üö® ***–î–æ—Å—Ç—É–ø –∑–∞–∫–æ–Ω—á–∏–ª—Å—è! {message.from_user.first_name}, –Ω–∞–º –Ω—É–∂–Ω–æ —ç—Ç–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å!***', parse_mode='MARKDOWN',
            reply_markup=payment_keyboard1())





# (–ö–ê–î–ê–°–¢–†–û–í–´–ô –ù–û–ú–ï–†)
@dp.message(lambda message: ',' in message.text)
async def kadaster_number_handler(message: types.Message):
    # –ü–û–õ–£–ß–ï–ù–ò–ï –ò–ù–§–û–†–ú–ê–¶–ò–ò –ü–û –£–õ–ò–¶–ï –ß–ï–†–ï–ó DADATA API
    # –ü–†–û–í–ï–ö–ê –î–û–°–¢–£–ü–ê
    error_photo_path = 'fotos/error.jpg'

    if db.get_sub_status(message.from_user.id):
        answer = message.text
        try:

            def buttons():
                builder = InlineKeyboardBuilder()
                builder.add(
                    InlineKeyboardButton(
                        text="üöÄ –¢–≥ —Å–æ–∑–¥–∞—Ç–µ–ª—è",
                        url=f"https://t.me/+1A9f6ZFMJBgxMjRi"
                    ),
                    InlineKeyboardButton(
                        text="üîô –ù–∞–∑–∞–¥",
                        callback_data='back_to_menu'
                    )
                )
                return builder.as_markup()


            parts = [part.strip() for part in answer.split(',')]
            parts = ' '.join(parts)
            result = await dadata.clean("address", answer)
            await message.answer(f'‚îú ***–ê–¥—Ä–µ—Å:*** `{result["result"]}`\n'
                                 f'‚îú ***–£–ª–∏—Ü–∞:*** `{result["street"]}`\n'
                                 f'‚îú ***–î–æ–º:*** `{result["house"]}`\n'
                                 f'‚îú ***–ö–≤–∞—Ä—Ç–∏—Ä–∞:*** `{result["flat"]}`\n'
                                 f'‚îú ***–ò–Ω–¥–µ–∫—Å:*** `{result["postal_code"]}`\n'
                                 f'‚îú ***–û–±–ª–∞—Å—Ç—å:*** `{result["region"]}`\n'
                                 f'‚îî ***–ö–∞–¥–∞—Å—Ç—Ä–æ–≤—ã–π –Ω–æ–º–µ—Ä:*** `{result["flat_cadnum"]}`', parse_mode='MARKDOWN', reply_markup=buttons())
        except Exception:
            await message.answer_photo(FSInputFile(error_photo_path),
                                       caption=f'‚ùóÔ∏è ***–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞–¥—Ä–µ—Å–∞:***',
                                       parse_mode='MARKDOWN', reply_markup=back_command_keyboard())

    else:
        await message.answer_photo(photo=FSInputFile(error_photo_path), caption=
        f'üö® ***–î–æ—Å—Ç—É–ø –∑–∞–∫–æ–Ω—á–∏–ª—Å—è! {message.from_user.first_name}, –Ω–∞–º –Ω—É–∂–Ω–æ —ç—Ç–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å!***', parse_mode='MARKDOWN',
                                   reply_markup=payment_keyboard1())


# COMPANY
@dp.message(Command('company'))
async def company_handler(message: types.Message):
    error_photo_path = 'fotos/error.jpg'
    message_photo_path = 'fotos/message.jpg'

    if not db.get_sub_status(message.from_user.id):
        await message.answer_photo(photo=FSInputFile(error_photo_path), caption=
                f'üö® ***–î–æ—Å—Ç—É–ø –∑–∞–∫–æ–Ω—á–∏–ª—Å—è! {message.from_user.first_name}, –Ω–∞–º –Ω—É–∂–Ω–æ —ç—Ç–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å!***', parse_mode='MARKDOWN',
                                           reply_markup=payment_keyboard1())
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å—Ç—å –ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç –ø–æ—Å–ª–µ /company
    command_parts = message.text.split(maxsplit=1)
    if len(command_parts) < 2:
        await message.answer_photo(photo=FSInputFile(error_photo_path), caption="‚ùóÔ∏è ***–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã*** /company", parse_mode='MARKDOWN', reply_markup=back_command_keyboard())
        return

    try:
        company_name = command_parts[1]
        result = await dadata.suggest("party", company_name)
        companies = [item['value'] for item in result]

        company_keyboard = InlineKeyboardBuilder()
        for company in companies:
            short_company = company[:10]
            company_keyboard.add(InlineKeyboardButton(
                text=company,
                callback_data=f'company_{short_company}'
            ))
        company_keyboard.add(InlineKeyboardButton(text='üîô –ù–∞–∑–∞–¥', callback_data='back_to_menu'))
        company_keyboard.adjust(1)

        await message.answer_photo(
                photo=FSInputFile(message_photo_path),
                caption='üÜî –ù–∞–π–¥–µ–Ω—ã –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏. –í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –∫–æ–º–ø–∞–Ω–∏–π:',
                reply_markup=company_keyboard.as_markup(),
            )

    except Exception:
        await message.answer_photo(
                photo=FSInputFile(error_photo_path),
                caption=f'‚ùóÔ∏è ***–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–ø–∞–Ω–∏–∏:***',
                parse_mode='MARKDOWN',
                reply_markup=back_command_keyboard()
            )




# INN SEARCH
@dp.message(Command('inn'))
async def inn_handler(message: types.Message):
    # –ü–û–õ–£–ß–ï–ù–ò–ï –ò–ù–§–û–†–ú–ê–¶–ò–ò –ß–ï–†–ï–ó –ò–ù–ù –ö–û–ú–ü–ê–ù–ò–ò

    error_photo_path = 'fotos/error.jpg'
    message_photo_path = 'fotos/message.jpg'
    if db.get_sub_status(message.from_user.id):
        try:
            inn_parse = message.text.split(maxsplit=1)
            answer = inn_parse[1]
            company_keyboard = InlineKeyboardBuilder()
            result = dadata_for_inn.find_by_id("party", answer)
            write_inf(result, 'users.json')
            useresult = read_inf('users.json')
            result = [user['value'] for user in useresult]

            for i in result:
                short_company = i[:10]
                button = InlineKeyboardButton(text=i, callback_data=f'company_{short_company}')
                company_keyboard.add(button)

            back = InlineKeyboardButton(text='üîô –ù–∞–∑–∞–¥', callback_data='back_to_menu')
            company_keyboard.add(back)
            company_keyboard.adjust(1)
            await message.answer_photo(photo=FSInputFile(message_photo_path), caption='üÜî –ù–∞–π–¥–µ–Ω—ã –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏. –í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –∫–æ–º–ø–∞–Ω–∏–π:', reply_markup=company_keyboard.as_markup())

        except Exception:
            await message.answer_photo(
                photo=FSInputFile(error_photo_path),
                caption=f'‚ùóÔ∏è ***–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–ø–∞–Ω–∏–∏/–∏–Ω–Ω:***',
                parse_mode='MARKDOWN',
                reply_markup=back_command_keyboard()
            )
    else:
        await message.answer_photo(photo=FSInputFile(error_photo_path), caption=
        f'üö® ***–î–æ—Å—Ç—É–ø –∑–∞–∫–æ–Ω—á–∏–ª—Å—è! {message.from_user.first_name}, –Ω–∞–º –Ω—É–∂–Ω–æ —ç—Ç–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å!***', parse_mode='MARKDOWN',
                                   reply_markup=payment_keyboard1())






# TECHNICAL PART (JSON)
def write_inf(data, file_name):
    data = json.dumps(data)
    data = json.loads(str(data))

    with open(file_name, 'w', encoding="utf-8") as file:
        json.dump(data, file, indent=4)

def read_inf(file_name):
    with open(file_name, 'r', encoding="utf-8") as file:
        return json.load(file)

def get_data():
    users = read_inf('users.json')
    for user in users['suggestions']:
        print(user.get('value'))
        with open("users.json", "w") as f:
            pass



async def main():
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())


    # dp.start_polling(bot, skip_updates=True)
